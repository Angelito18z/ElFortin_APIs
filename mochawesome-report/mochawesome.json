{
  "stats": {
    "suites": 29,
    "tests": 88,
    "passes": 76,
    "pending": 0,
    "failures": 12,
    "start": "2024-11-18T22:57:37.479Z",
    "end": "2024-11-18T22:57:37.634Z",
    "duration": 155,
    "testsRegistered": 95,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 7,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "1631d2b1-d7d7-4854-a06c-f9ba5dfba4ff",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8c655f0b-4fd7-462e-8c5f-9dad1c0119f6",
          "title": "Pruebas de la API Pedidos",
          "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\pedidos.test.js",
          "file": "\\test\\pedidos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API Pedidos\"",
              "fullTitle": "Pruebas de la API Pedidos \"before all\" hook in \"Pruebas de la API Pedidos\"",
              "timedOut": false,
              "duration": 49,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await pedidosModelo.findAll();\ngetId = await pedidosModelo.findById(1);\nfirstOrder = getAll[0]; // Extraer el primer pedido para usar en los tests",
              "err": {},
              "uuid": "881eab3b-4462-46b1-8e37-7fd8f68a92bb",
              "parentUUID": "8c655f0b-4fd7-462e-8c5f-9dad1c0119f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API Pedidos\"",
              "fullTitle": "Pruebas de la API Pedidos \"after all\" hook in \"Pruebas de la API Pedidos\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "26c926b9-9de5-485a-ad77-779d8c51b083",
              "parentUUID": "8c655f0b-4fd7-462e-8c5f-9dad1c0119f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "eb4a1862-dfb1-4404-857e-d7c3599ad6c0",
              "title": "Pruebas del método GET",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\pedidos.test.js",
              "file": "\\test\\pedidos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Devuelve un array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "b59077de-c8bc-4d72-8967-98f9242dad50",
                  "parentUUID": "eb4a1862-dfb1-4404-857e-d7c3599ad6c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "a0cd7fbd-867f-45eb-83bb-7af35a3de062",
                  "parentUUID": "eb4a1862-dfb1-4404-857e-d7c3599ad6c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /orders",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Devuelve el código de estado 200 para GET /orders",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/orders');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "68764c82-c6c0-4931-b0ea-c5b06a692c2f",
                  "parentUUID": "eb4a1862-dfb1-4404-857e-d7c3599ad6c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran pedidos",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Devuelve el código de estado 404 si no se encuentran pedidos",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/orders/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "af859ed3-b8c0-4c78-9293-e9c18d8bf704",
                  "parentUUID": "eb4a1862-dfb1-4404-857e-d7c3599ad6c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada pedido devuelto tiene los campos correctos",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Cada pedido devuelto tiene los campos correctos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(firstOrder).to.have.property('id');\nexpect(firstOrder).to.have.property('restaurant_id');\nexpect(firstOrder).to.have.property('table_number');\nexpect(firstOrder).to.have.property('total_amount');\nexpect(firstOrder).to.have.property('client_id');\nexpect(firstOrder).to.have.property('pre_tax_total');\nexpect(firstOrder).to.have.property('post_tax_total');\nexpect(firstOrder).to.have.property('payment_method_id');\nexpect(firstOrder).to.have.property('status_id');\nexpect(firstOrder).to.have.property('order_type');\nexpect(firstOrder).to.have.property('discount_id');\nexpect(firstOrder).to.have.property('created_at');\nexpect(firstOrder).to.have.property('updated_at');\nexpect(firstOrder).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "c86b44b9-0312-4f1b-838e-4c1bd0a5d2a0",
                  "parentUUID": "eb4a1862-dfb1-4404-857e-d7c3599ad6c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b59077de-c8bc-4d72-8967-98f9242dad50",
                "a0cd7fbd-867f-45eb-83bb-7af35a3de062",
                "68764c82-c6c0-4931-b0ea-c5b06a692c2f",
                "af859ed3-b8c0-4c78-9293-e9c18d8bf704",
                "c86b44b9-0312-4f1b-838e-4c1bd0a5d2a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b394bb9-4a99-40a0-9a4d-e82a0bbeb7e3",
              "title": "Pruebas del método GET pedido por id",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\pedidos.test.js",
              "file": "\\test\\pedidos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET pedido por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "98f69da6-a70a-4380-9dc9-154235e66d89",
                  "parentUUID": "4b394bb9-4a99-40a0-9a4d-e82a0bbeb7e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET pedido por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "072b27bc-f31e-4830-bdfb-3dad606e894b",
                  "parentUUID": "4b394bb9-4a99-40a0-9a4d-e82a0bbeb7e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98f69da6-a70a-4380-9dc9-154235e66d89",
                "072b27bc-f31e-4830-bdfb-3dad606e894b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "08db70f7-f335-42a8-91d5-a0579bbaf5f8",
          "title": "Pruebas de la API productos",
          "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\productos.test.js",
          "file": "\\test\\productos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API productos\"",
              "fullTitle": "Pruebas de la API productos \"before all\" hook in \"Pruebas de la API productos\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await productModel.findAll();\n        getId = await productModel.findById(1);",
              "err": {},
              "uuid": "76d627a6-2a36-4edc-a638-e5fb992d1b1f",
              "parentUUID": "08db70f7-f335-42a8-91d5-a0579bbaf5f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API productos\"",
              "fullTitle": "Pruebas de la API productos \"after all\" hook in \"Pruebas de la API productos\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "7a87e3f6-f1ec-4ced-8c6c-ca4ff4c93c9d",
              "parentUUID": "08db70f7-f335-42a8-91d5-a0579bbaf5f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1b62214b-5867-48e5-8b73-0cdaf524cdd6",
              "title": "Pruebas del metodo GET",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\productos.test.js",
              "file": "\\test\\productos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "5e90e788-73f2-4999-8dcb-c991cdc51b70",
                  "parentUUID": "1b62214b-5867-48e5-8b73-0cdaf524cdd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "2050d8bd-89f6-4925-b2bd-61c2e69946ac",
                  "parentUUID": "1b62214b-5867-48e5-8b73-0cdaf524cdd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /ventas",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Devuelve el código de estado 200 para GET /ventas",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "30b6a319-32ad-49bd-bf77-fc5d1fe81182",
                  "parentUUID": "1b62214b-5867-48e5-8b73-0cdaf524cdd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran ventas",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran ventas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "cc85303f-4d4f-4a5a-97bb-d629b154f32a",
                  "parentUUID": "1b62214b-5867-48e5-8b73-0cdaf524cdd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada venta devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Cada venta devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('report_date');\nexpect( getAll[0]).to.have.property('total_sales');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {
                    "message": "AssertionError: expected { id: '1', restaurant_id: '1', …(9) } to have property 'report_date'",
                    "estack": "AssertionError: expected { id: '1', restaurant_id: '1', …(9) } to have property 'report_date'\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/productos.test.js:41:40)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "5b70d2bd-e838-4f52-999c-a9952c687eb9",
                  "parentUUID": "1b62214b-5867-48e5-8b73-0cdaf524cdd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e90e788-73f2-4999-8dcb-c991cdc51b70",
                "2050d8bd-89f6-4925-b2bd-61c2e69946ac",
                "30b6a319-32ad-49bd-bf77-fc5d1fe81182",
                "cc85303f-4d4f-4a5a-97bb-d629b154f32a"
              ],
              "failures": [
                "5b70d2bd-e838-4f52-999c-a9952c687eb9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f9b8103-afaf-4e22-89c9-7838bd4d4e1e",
              "title": "Pruebas del metodo GET venta por id",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\productos.test.js",
              "file": "\\test\\productos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET venta por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "ea97900c-8b65-4880-ab15-f525e0507b78",
                  "parentUUID": "4f9b8103-afaf-4e22-89c9-7838bd4d4e1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET venta por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "23a48839-ff98-4f89-9fb2-20a3a54285ee",
                  "parentUUID": "4f9b8103-afaf-4e22-89c9-7838bd4d4e1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea97900c-8b65-4880-ab15-f525e0507b78",
                "23a48839-ff98-4f89-9fb2-20a3a54285ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a5abd33b-36f7-41b3-b5fc-eca25d6c78b3",
          "title": "Pruebas de la API promociones",
          "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\promociones.test.js",
          "file": "\\test\\promociones.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API promociones\"",
              "fullTitle": "Pruebas de la API promociones \"before all\" hook in \"Pruebas de la API promociones\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await promocionesModelo.obtenerTodo();\n        getId = await promocionesModelo.obtenerPromocionId(1);",
              "err": {},
              "uuid": "64bcad22-e22a-4107-b707-91fe25736951",
              "parentUUID": "a5abd33b-36f7-41b3-b5fc-eca25d6c78b3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API promociones\"",
              "fullTitle": "Pruebas de la API promociones \"after all\" hook in \"Pruebas de la API promociones\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "52e46e50-ec55-412e-98a1-20d4910207b3",
              "parentUUID": "a5abd33b-36f7-41b3-b5fc-eca25d6c78b3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a07a24af-5fa2-4d9e-9d5b-a487181dbb53",
              "title": "Pruebas del metodo GET",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\promociones.test.js",
              "file": "\\test\\promociones.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "aee54681-ed7c-46a7-816a-4e84008202ba",
                  "parentUUID": "a07a24af-5fa2-4d9e-9d5b-a487181dbb53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "98bcd81c-536a-4756-92f1-b50c98b9e46a",
                  "parentUUID": "a07a24af-5fa2-4d9e-9d5b-a487181dbb53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /ventas",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Devuelve el código de estado 200 para GET /ventas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "158491bb-c473-45d5-8cc6-f89bfdd658fc",
                  "parentUUID": "a07a24af-5fa2-4d9e-9d5b-a487181dbb53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran ventas",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran ventas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "41d1344c-f9e1-4a9f-bf15-df8bf65c9a9b",
                  "parentUUID": "a07a24af-5fa2-4d9e-9d5b-a487181dbb53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada venta devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Cada venta devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('report_date');\nexpect( getAll[0]).to.have.property('total_sales');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {
                    "message": "AssertionError: expected { id: '1', code: 'SUMMER2024', …(9) } to have property 'restaurant_id'",
                    "estack": "AssertionError: expected { id: '1', code: 'SUMMER2024', …(9) } to have property 'restaurant_id'\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/promociones.test.js:40:40)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "91b87c92-9ea2-4f08-8eaa-266713d0b12a",
                  "parentUUID": "a07a24af-5fa2-4d9e-9d5b-a487181dbb53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aee54681-ed7c-46a7-816a-4e84008202ba",
                "98bcd81c-536a-4756-92f1-b50c98b9e46a",
                "158491bb-c473-45d5-8cc6-f89bfdd658fc",
                "41d1344c-f9e1-4a9f-bf15-df8bf65c9a9b"
              ],
              "failures": [
                "91b87c92-9ea2-4f08-8eaa-266713d0b12a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a6dbecc-f62d-4680-afa5-b7e57d374052",
              "title": "Pruebas del metodo GET venta por id",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\promociones.test.js",
              "file": "\\test\\promociones.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET venta por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "8a5b7ddb-1888-4a37-a8af-9d56283056a9",
                  "parentUUID": "6a6dbecc-f62d-4680-afa5-b7e57d374052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET venta por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "c9dff03b-c14a-44db-af84-001af294ba1f",
                  "parentUUID": "6a6dbecc-f62d-4680-afa5-b7e57d374052",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a5b7ddb-1888-4a37-a8af-9d56283056a9",
                "c9dff03b-c14a-44db-af84-001af294ba1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c0a3908e-4186-4ae8-8435-f7c40a0a5909",
          "title": "Pruebas de la API proveedores",
          "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\proveedores.test.js",
          "file": "\\test\\proveedores.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API proveedores\"",
              "fullTitle": "Pruebas de la API proveedores \"before all\" hook in \"Pruebas de la API proveedores\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await proveedoresModelo.obtenerTodo();\n        getId = await proveedoresModelo.obtenerProveedorId(1);",
              "err": {},
              "uuid": "f2367988-edfe-4936-9b9d-24d7adf9f794",
              "parentUUID": "c0a3908e-4186-4ae8-8435-f7c40a0a5909",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API proveedores\"",
              "fullTitle": "Pruebas de la API proveedores \"after all\" hook in \"Pruebas de la API proveedores\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "3c523262-dd49-4466-8d2a-3a84ce5b48aa",
              "parentUUID": "c0a3908e-4186-4ae8-8435-f7c40a0a5909",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "040fa420-203c-4d2b-9ad6-1e17d7ba1287",
              "title": "Pruebas del metodo GET",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\proveedores.test.js",
              "file": "\\test\\proveedores.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "ead97a24-6bc8-44c6-bb20-27ff205e568c",
                  "parentUUID": "040fa420-203c-4d2b-9ad6-1e17d7ba1287",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "472c3eb9-7d52-41a9-a4e3-3bc1668f18bd",
                  "parentUUID": "040fa420-203c-4d2b-9ad6-1e17d7ba1287",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /ventas",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Devuelve el código de estado 200 para GET /ventas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "e91edbdb-634f-4bec-937f-920a12f868c1",
                  "parentUUID": "040fa420-203c-4d2b-9ad6-1e17d7ba1287",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran ventas",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran ventas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "f404aa12-d348-49ad-a2a4-19b7d0d24558",
                  "parentUUID": "040fa420-203c-4d2b-9ad6-1e17d7ba1287",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada venta devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Cada venta devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('report_date');\nexpect( getAll[0]).to.have.property('total_sales');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {
                    "message": "AssertionError: expected { id: '1', …(5) } to have property 'restaurant_id'",
                    "estack": "AssertionError: expected { id: '1', …(5) } to have property 'restaurant_id'\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/proveedores.test.js:40:40)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "9bbf22bb-1eb0-42fd-8fa1-fa9ca621b647",
                  "parentUUID": "040fa420-203c-4d2b-9ad6-1e17d7ba1287",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ead97a24-6bc8-44c6-bb20-27ff205e568c",
                "472c3eb9-7d52-41a9-a4e3-3bc1668f18bd",
                "e91edbdb-634f-4bec-937f-920a12f868c1",
                "f404aa12-d348-49ad-a2a4-19b7d0d24558"
              ],
              "failures": [
                "9bbf22bb-1eb0-42fd-8fa1-fa9ca621b647"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f316ea2-7800-4483-887f-234c5821d85a",
              "title": "Pruebas del metodo GET venta por id",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\proveedores.test.js",
              "file": "\\test\\proveedores.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET venta por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "779cd509-c175-487e-ad8f-f12ece51d9f6",
                  "parentUUID": "7f316ea2-7800-4483-887f-234c5821d85a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET venta por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "42653e29-fd47-45b6-8855-c48fc95a0ec1",
                  "parentUUID": "7f316ea2-7800-4483-887f-234c5821d85a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "779cd509-c175-487e-ad8f-f12ece51d9f6",
                "42653e29-fd47-45b6-8855-c48fc95a0ec1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3878782-ed71-461e-bd6d-ac124ab5ed36",
          "title": "Pruebas de la API restaurantes",
          "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\restaurantes.test.js",
          "file": "\\test\\restaurantes.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API restaurantes\"",
              "fullTitle": "Pruebas de la API restaurantes \"before all\" hook in \"Pruebas de la API restaurantes\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await restaurantesModelo.obtenerTodo();\n        getId = await restaurantesModelo.obtenerRestauranteId(1);",
              "err": {},
              "uuid": "b0f8de15-d993-4a1d-b6c2-3aad9e55a40d",
              "parentUUID": "c3878782-ed71-461e-bd6d-ac124ab5ed36",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API restaurantes\"",
              "fullTitle": "Pruebas de la API restaurantes \"after all\" hook in \"Pruebas de la API restaurantes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "68788fc9-d50f-49a3-a34d-6451c86fd835",
              "parentUUID": "c3878782-ed71-461e-bd6d-ac124ab5ed36",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1291f5b4-7478-40b0-8a4c-7e19d69096dd",
              "title": "Pruebas del metodo GET",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\restaurantes.test.js",
              "file": "\\test\\restaurantes.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "df5cc33d-78ed-4d72-aa13-c0197bf867a2",
                  "parentUUID": "1291f5b4-7478-40b0-8a4c-7e19d69096dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "0e90edad-cbd6-42a9-aef0-f4491682ec62",
                  "parentUUID": "1291f5b4-7478-40b0-8a4c-7e19d69096dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /ventas",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Devuelve el código de estado 200 para GET /ventas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "43533214-b9c0-41a8-85d7-855ad18cb610",
                  "parentUUID": "1291f5b4-7478-40b0-8a4c-7e19d69096dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran ventas",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran ventas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "fee33f9a-f898-4144-87fb-a0ecf45ee9b5",
                  "parentUUID": "1291f5b4-7478-40b0-8a4c-7e19d69096dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada venta devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Cada venta devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('report_date');\nexpect( getAll[0]).to.have.property('total_sales');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {
                    "message": "AssertionError: expected { id: '1', name: 'Fortin', …(5) } to have property 'restaurant_id'",
                    "estack": "AssertionError: expected { id: '1', name: 'Fortin', …(5) } to have property 'restaurant_id'\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/restaurantes.test.js:40:40)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "6e191faf-64f0-4d97-8988-c88683b8898a",
                  "parentUUID": "1291f5b4-7478-40b0-8a4c-7e19d69096dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df5cc33d-78ed-4d72-aa13-c0197bf867a2",
                "0e90edad-cbd6-42a9-aef0-f4491682ec62",
                "43533214-b9c0-41a8-85d7-855ad18cb610",
                "fee33f9a-f898-4144-87fb-a0ecf45ee9b5"
              ],
              "failures": [
                "6e191faf-64f0-4d97-8988-c88683b8898a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3699646-c405-4ec9-888d-b16674580fc1",
              "title": "Pruebas del metodo GET venta por id",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\restaurantes.test.js",
              "file": "\\test\\restaurantes.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET venta por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "2c5a63cf-80c3-475e-986f-870f34507ebe",
                  "parentUUID": "e3699646-c405-4ec9-888d-b16674580fc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET venta por id No devuelve un array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "5a15921c-10d5-444e-af4f-4c3418fb2e76",
                  "parentUUID": "e3699646-c405-4ec9-888d-b16674580fc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c5a63cf-80c3-475e-986f-870f34507ebe",
                "5a15921c-10d5-444e-af4f-4c3418fb2e76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d0b2896c-8dca-49f9-b5b9-aa37ea60c5aa",
          "title": "Pruebas de la API usuarios",
          "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\usuarios.test.js",
          "file": "\\test\\usuarios.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API usuarios\"",
              "fullTitle": "Pruebas de la API usuarios \"before all\" hook in \"Pruebas de la API usuarios\"",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "getAll = await usuariosModel.obtenerTodo();\n        getId = await usuariosModel.findById(1);",
              "err": {
                "message": "TypeError: usuariosModel.obtenerTodo is not a function",
                "estack": "TypeError: usuariosModel.obtenerTodo is not a function\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/usuarios.test.js:11:39)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "920d67f3-9a8c-4672-924d-77a22e393545",
              "parentUUID": "d0b2896c-8dca-49f9-b5b9-aa37ea60c5aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API usuarios\"",
              "fullTitle": "Pruebas de la API usuarios \"after all\" hook in \"Pruebas de la API usuarios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "7388d18d-d0a2-43f9-b5d6-8d691074dc19",
              "parentUUID": "d0b2896c-8dca-49f9-b5b9-aa37ea60c5aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "44375aea-0bcf-41e8-a7dd-f39214f3c3a9",
              "title": "Pruebas del metodo GET",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\usuarios.test.js",
              "file": "\\test\\usuarios.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "f8a4efb8-2417-473a-a4e0-e162c25c6502",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "8d86d609-509f-4735-9b19-52bced70d879",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /ventas",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Devuelve el código de estado 200 para GET /ventas",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "e594f0c9-b449-4ea8-8aaa-816cede5d5bc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran ventas",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran ventas",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "03bce7ce-6d64-49cd-a881-e03e68f4f0c8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "Cada venta devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Cada venta devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('report_date');\nexpect( getAll[0]).to.have.property('total_sales');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "4fb778dc-675e-4809-a083-14307712fd3a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "f8a4efb8-2417-473a-a4e0-e162c25c6502",
                "8d86d609-509f-4735-9b19-52bced70d879",
                "e594f0c9-b449-4ea8-8aaa-816cede5d5bc",
                "03bce7ce-6d64-49cd-a881-e03e68f4f0c8",
                "4fb778dc-675e-4809-a083-14307712fd3a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30f99d7e-b259-453f-8714-f48b9f88832e",
              "title": "Pruebas del metodo GET venta por id",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\usuarios.test.js",
              "file": "\\test\\usuarios.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET venta por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "e10beff6-c7e2-433f-a9b1-c523728b42c2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET venta por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "98addf71-b537-451d-8202-e0ca94849d71",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "e10beff6-c7e2-433f-a9b1-c523728b42c2",
                "98addf71-b537-451d-8202-e0ca94849d71"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dcd5d036-f91f-457e-aa01-ad8fcca09c13",
          "title": "Validation Functions",
          "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
          "file": "\\test\\validations.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6c67c78b-5e11-4390-8756-f167c7f6aead",
              "title": "SQL Injection Prevention (hasUnsafeCharacters)",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if input contains single quotes",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains single quotes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters(\"O'Reilly\")).to.be.true;",
                  "err": {},
                  "uuid": "af2be255-ef51-4fa3-9ebc-d59716485c1e",
                  "parentUUID": "6c67c78b-5e11-4390-8756-f167c7f6aead",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains double quotes",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains double quotes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('He said \"Hello\"')).to.be.true;",
                  "err": {},
                  "uuid": "cc3580b3-217f-4931-a69b-f08f79471d1f",
                  "parentUUID": "6c67c78b-5e11-4390-8756-f167c7f6aead",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains backslash",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains backslash",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('C:\\\\Windows')).to.be.true;",
                  "err": {},
                  "uuid": "d73110d5-0bcc-41a0-9960-9cab7e8a73ff",
                  "parentUUID": "6c67c78b-5e11-4390-8756-f167c7f6aead",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains semicolon",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains semicolon",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('DROP TABLE users;')).to.be.true;",
                  "err": {},
                  "uuid": "c6f2a4f7-8861-4ca5-97e7-5a6f7b33ba5e",
                  "parentUUID": "6c67c78b-5e11-4390-8756-f167c7f6aead",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains double dash",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains double dash",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('SELECT * FROM users --')).to.be.true;",
                  "err": {},
                  "uuid": "444ba119-f3f3-4434-9820-fc6085d0b054",
                  "parentUUID": "6c67c78b-5e11-4390-8756-f167c7f6aead",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for safe input",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return false for safe input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('SafeInput123')).to.be.false;",
                  "err": {},
                  "uuid": "644cc164-e352-4c0d-8860-6193c50bbff0",
                  "parentUUID": "6c67c78b-5e11-4390-8756-f167c7f6aead",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af2be255-ef51-4fa3-9ebc-d59716485c1e",
                "cc3580b3-217f-4931-a69b-f08f79471d1f",
                "d73110d5-0bcc-41a0-9960-9cab7e8a73ff",
                "c6f2a4f7-8861-4ca5-97e7-5a6f7b33ba5e",
                "444ba119-f3f3-4434-9820-fc6085d0b054",
                "644cc164-e352-4c0d-8860-6193c50bbff0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14508bca-6d62-4335-a669-816045ebe16a",
              "title": "Category Name Validation",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid category name",
                  "fullTitle": "Validation Functions Category Name Validation should return true for a valid category name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('Desserts')).to.be.true;",
                  "err": {},
                  "uuid": "3394e141-764b-4564-8d67-6e66d811236e",
                  "parentUUID": "14508bca-6d62-4335-a669-816045ebe16a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a name with special characters",
                  "fullTitle": "Validation Functions Category Name Validation should return false for a name with special characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName(\"Cakes@2024\")).to.be.false;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/validations.test.js:32:71)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "f3b132ec-4aea-41f9-ade8-cd49df6439ad",
                  "parentUUID": "14508bca-6d62-4335-a669-816045ebe16a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an empty string",
                  "fullTitle": "Validation Functions Category Name Validation should return false for an empty string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('')).to.be.false;",
                  "err": {},
                  "uuid": "5ca331d8-2b19-4238-8e66-74a793ec5c85",
                  "parentUUID": "14508bca-6d62-4335-a669-816045ebe16a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a name exceeding 50 characters",
                  "fullTitle": "Validation Functions Category Name Validation should return false for a name exceeding 50 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('a'.repeat(51))).to.be.false;",
                  "err": {},
                  "uuid": "b04cb31d-f77a-4254-bb2b-e4f47bdb5822",
                  "parentUUID": "14508bca-6d62-4335-a669-816045ebe16a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a name with exactly 50 characters",
                  "fullTitle": "Validation Functions Category Name Validation should return true for a name with exactly 50 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('a'.repeat(50))).to.be.true;",
                  "err": {},
                  "uuid": "60e50850-c7c7-48ea-8490-62f5ca8598dd",
                  "parentUUID": "14508bca-6d62-4335-a669-816045ebe16a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3394e141-764b-4564-8d67-6e66d811236e",
                "5ca331d8-2b19-4238-8e66-74a793ec5c85",
                "b04cb31d-f77a-4254-bb2b-e4f47bdb5822",
                "60e50850-c7c7-48ea-8490-62f5ca8598dd"
              ],
              "failures": [
                "f3b132ec-4aea-41f9-ade8-cd49df6439ad"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3f5cfe5-a215-441b-9053-23f0d0efe53b",
              "title": "Email Validation",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid email address",
                  "fullTitle": "Validation Functions Email Validation should return true for a valid email address",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test@example.com')).to.be.true;",
                  "err": {},
                  "uuid": "0479ac65-33ab-41d4-a076-cc6c8c497bd0",
                  "parentUUID": "a3f5cfe5-a215-441b-9053-23f0d0efe53b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email without \"@\"",
                  "fullTitle": "Validation Functions Email Validation should return false for an email without \"@\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('testexample.com')).to.be.false;",
                  "err": {},
                  "uuid": "9b26c47e-94c6-4425-87b5-ed0cf6087311",
                  "parentUUID": "a3f5cfe5-a215-441b-9053-23f0d0efe53b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email without domain",
                  "fullTitle": "Validation Functions Email Validation should return false for an email without domain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test@.com')).to.be.false;",
                  "err": {},
                  "uuid": "e9816917-df49-4a57-95c6-268d1dff19b3",
                  "parentUUID": "a3f5cfe5-a215-441b-9053-23f0d0efe53b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email with spaces",
                  "fullTitle": "Validation Functions Email Validation should return false for an email with spaces",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test @example.com')).to.be.false;",
                  "err": {},
                  "uuid": "3c9f6437-9ae6-4b0f-8bb6-505bad8faa6d",
                  "parentUUID": "a3f5cfe5-a215-441b-9053-23f0d0efe53b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email with SQL injection characters",
                  "fullTitle": "Validation Functions Email Validation should return false for an email with SQL injection characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test@example.com; DROP TABLE users;')).to.be.false;",
                  "err": {},
                  "uuid": "dc8d6b6d-de91-4863-bb61-314de31b544c",
                  "parentUUID": "a3f5cfe5-a215-441b-9053-23f0d0efe53b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0479ac65-33ab-41d4-a076-cc6c8c497bd0",
                "9b26c47e-94c6-4425-87b5-ed0cf6087311",
                "e9816917-df49-4a57-95c6-268d1dff19b3",
                "3c9f6437-9ae6-4b0f-8bb6-505bad8faa6d",
                "dc8d6b6d-de91-4863-bb61-314de31b544c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "66494fbb-aec7-4066-8a35-0d3a2458272b",
              "title": "Password Validation",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid password",
                  "fullTitle": "Validation Functions Password Validation should return true for a valid password",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('SecurePass123!')).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/validations.test.js:67:71)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "c33fe15f-2a8f-4771-a6c8-9de720e4fa44",
                  "parentUUID": "66494fbb-aec7-4066-8a35-0d3a2458272b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password shorter than 8 characters",
                  "fullTitle": "Validation Functions Password Validation should return false for a password shorter than 8 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('Short1')).to.be.false;",
                  "err": {},
                  "uuid": "6df74b8c-22b1-4474-8ccd-93d5d8501042",
                  "parentUUID": "66494fbb-aec7-4066-8a35-0d3a2458272b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password longer than 20 characters",
                  "fullTitle": "Validation Functions Password Validation should return false for a password longer than 20 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('a'.repeat(21))).to.be.false;",
                  "err": {},
                  "uuid": "ae7a5c39-c64b-4e16-9d76-9390bf1c5702",
                  "parentUUID": "66494fbb-aec7-4066-8a35-0d3a2458272b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password without numbers",
                  "fullTitle": "Validation Functions Password Validation should return false for a password without numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('PasswordOnly')).to.be.false;",
                  "err": {},
                  "uuid": "c962860a-fc3e-47ca-a17b-baf6bbd89014",
                  "parentUUID": "66494fbb-aec7-4066-8a35-0d3a2458272b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password with spaces",
                  "fullTitle": "Validation Functions Password Validation should return false for a password with spaces",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('Pass word123')).to.be.false;",
                  "err": {},
                  "uuid": "2eece8a0-b4c2-4995-af81-7cafaa9c7c98",
                  "parentUUID": "66494fbb-aec7-4066-8a35-0d3a2458272b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password with SQL injection patterns",
                  "fullTitle": "Validation Functions Password Validation should return false for a password with SQL injection patterns",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('Passw0rd;--')).to.be.false;",
                  "err": {},
                  "uuid": "b1a52ed1-410d-4b3c-80df-99f46a5c9f50",
                  "parentUUID": "66494fbb-aec7-4066-8a35-0d3a2458272b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6df74b8c-22b1-4474-8ccd-93d5d8501042",
                "ae7a5c39-c64b-4e16-9d76-9390bf1c5702",
                "c962860a-fc3e-47ca-a17b-baf6bbd89014",
                "2eece8a0-b4c2-4995-af81-7cafaa9c7c98",
                "b1a52ed1-410d-4b3c-80df-99f46a5c9f50"
              ],
              "failures": [
                "c33fe15f-2a8f-4771-a6c8-9de720e4fa44"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "657a3b11-c884-4459-b156-166b96e0d473",
              "title": "Phone Validation",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid 10-digit phone number",
                  "fullTitle": "Validation Functions Phone Validation should return true for a valid 10-digit phone number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('1234567890')).to.be.true;",
                  "err": {},
                  "uuid": "560b6b48-9501-42f6-be83-c0ae84abae07",
                  "parentUUID": "657a3b11-c884-4459-b156-166b96e0d473",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number with letters",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number with letters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('123ABC7890')).to.be.false;",
                  "err": {},
                  "uuid": "0852de21-e9fe-4e82-aeef-824fc1e2f3f2",
                  "parentUUID": "657a3b11-c884-4459-b156-166b96e0d473",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number with special characters",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number with special characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('123-456-7890')).to.be.false;",
                  "err": {},
                  "uuid": "fddb15d1-39c7-4671-b41e-2fc02d443761",
                  "parentUUID": "657a3b11-c884-4459-b156-166b96e0d473",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number shorter than 10 digits",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number shorter than 10 digits",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('12345')).to.be.false;",
                  "err": {},
                  "uuid": "d21a7dc6-f295-45c9-9656-ae474f707756",
                  "parentUUID": "657a3b11-c884-4459-b156-166b96e0d473",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number longer than 10 digits",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number longer than 10 digits",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('123456789012')).to.be.false;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/validations.test.js:101:66)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "fe5edeaf-2f6b-4e47-895b-084a3c90374c",
                  "parentUUID": "657a3b11-c884-4459-b156-166b96e0d473",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "560b6b48-9501-42f6-be83-c0ae84abae07",
                "0852de21-e9fe-4e82-aeef-824fc1e2f3f2",
                "fddb15d1-39c7-4671-b41e-2fc02d443761",
                "d21a7dc6-f295-45c9-9656-ae474f707756"
              ],
              "failures": [
                "fe5edeaf-2f6b-4e47-895b-084a3c90374c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d03db6c-4ccf-4393-9a2a-cac67ba0bb68",
              "title": "Price Validation",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid price",
                  "fullTitle": "Validation Functions Price Validation should return true for a valid price",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice(99.99)).to.be.true;",
                  "err": {},
                  "uuid": "d459b5c2-64f7-477f-b1ba-08fa99f11cac",
                  "parentUUID": "1d03db6c-4ccf-4393-9a2a-cac67ba0bb68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a negative price",
                  "fullTitle": "Validation Functions Price Validation should return false for a negative price",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice(-9.99)).to.be.false;",
                  "err": {},
                  "uuid": "e831343b-98a1-4cb7-a72f-9cc20b064fc7",
                  "parentUUID": "1d03db6c-4ccf-4393-9a2a-cac67ba0bb68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a price of 0",
                  "fullTitle": "Validation Functions Price Validation should return true for a price of 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice(0)).to.be.true;",
                  "err": {},
                  "uuid": "d65a7561-325d-49cf-a4ce-f388f7332423",
                  "parentUUID": "1d03db6c-4ccf-4393-9a2a-cac67ba0bb68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-numeric input",
                  "fullTitle": "Validation Functions Price Validation should return false for non-numeric input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice('fifty')).to.be.false;",
                  "err": {},
                  "uuid": "41ef9d9b-a79a-4285-9e35-fadf7679644a",
                  "parentUUID": "1d03db6c-4ccf-4393-9a2a-cac67ba0bb68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d459b5c2-64f7-477f-b1ba-08fa99f11cac",
                "e831343b-98a1-4cb7-a72f-9cc20b064fc7",
                "d65a7561-325d-49cf-a4ce-f388f7332423",
                "41ef9d9b-a79a-4285-9e35-fadf7679644a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5a78d8fd-124e-4061-9e1a-22a9ae7eb5cf",
              "title": "Rating Validation",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid rating of 1",
                  "fullTitle": "Validation Functions Rating Validation should return true for a valid rating of 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(1)).to.be.true;",
                  "err": {},
                  "uuid": "b83106c5-93ac-4be9-b5e9-5686191a41ac",
                  "parentUUID": "5a78d8fd-124e-4061-9e1a-22a9ae7eb5cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a valid rating of 5",
                  "fullTitle": "Validation Functions Rating Validation should return true for a valid rating of 5",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(5)).to.be.true;",
                  "err": {},
                  "uuid": "9515eef0-1bb5-4b94-9b4f-48fb94f22654",
                  "parentUUID": "5a78d8fd-124e-4061-9e1a-22a9ae7eb5cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a rating less than 1",
                  "fullTitle": "Validation Functions Rating Validation should return false for a rating less than 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(0)).to.be.false;",
                  "err": {},
                  "uuid": "8cae6707-c563-457d-ac75-2952799b9cd7",
                  "parentUUID": "5a78d8fd-124e-4061-9e1a-22a9ae7eb5cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a rating greater than 5",
                  "fullTitle": "Validation Functions Rating Validation should return false for a rating greater than 5",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(6)).to.be.false;",
                  "err": {},
                  "uuid": "ffe61174-3a25-4e7b-905b-8bca324759c4",
                  "parentUUID": "5a78d8fd-124e-4061-9e1a-22a9ae7eb5cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a decimal rating",
                  "fullTitle": "Validation Functions Rating Validation should return false for a decimal rating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(4.5)).to.be.false;",
                  "err": {},
                  "uuid": "5a6b2fc5-de9c-445b-83db-9117a122a237",
                  "parentUUID": "5a78d8fd-124e-4061-9e1a-22a9ae7eb5cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-numeric rating",
                  "fullTitle": "Validation Functions Rating Validation should return false for non-numeric rating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating('excellent')).to.be.false;",
                  "err": {},
                  "uuid": "e6a225ce-71a5-4255-a2ef-b8c3f2140260",
                  "parentUUID": "5a78d8fd-124e-4061-9e1a-22a9ae7eb5cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b83106c5-93ac-4be9-b5e9-5686191a41ac",
                "9515eef0-1bb5-4b94-9b4f-48fb94f22654",
                "8cae6707-c563-457d-ac75-2952799b9cd7",
                "ffe61174-3a25-4e7b-905b-8bca324759c4",
                "5a6b2fc5-de9c-445b-83db-9117a122a237",
                "e6a225ce-71a5-4255-a2ef-b8c3f2140260"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "61353e08-dce3-4085-beba-b2a0d56fe3db",
              "title": "Date Validation",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid date",
                  "fullTitle": "Validation Functions Date Validation should return true for a valid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('2024-12-31')).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/validations.test.js:146:63)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "3b5c5ba3-2107-44b2-8d82-ff51b44b2c55",
                  "parentUUID": "61353e08-dce3-4085-beba-b2a0d56fe3db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an invalid date format",
                  "fullTitle": "Validation Functions Date Validation should return false for an invalid date format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('31/12/2024')).to.be.false;",
                  "err": {},
                  "uuid": "c552eb06-4a26-4dea-be11-007160c02cf0",
                  "parentUUID": "61353e08-dce3-4085-beba-b2a0d56fe3db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a non-existent date",
                  "fullTitle": "Validation Functions Date Validation should return false for a non-existent date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('2024-02-30')).to.be.false;",
                  "err": {},
                  "uuid": "880811c9-a546-4ab9-80e2-69b5b7394bc3",
                  "parentUUID": "61353e08-dce3-4085-beba-b2a0d56fe3db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-date strings",
                  "fullTitle": "Validation Functions Date Validation should return false for non-date strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('not-a-date')).to.be.false;",
                  "err": {},
                  "uuid": "dc10e01a-3239-4681-ada6-891a3dd97fa4",
                  "parentUUID": "61353e08-dce3-4085-beba-b2a0d56fe3db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c552eb06-4a26-4dea-be11-007160c02cf0",
                "880811c9-a546-4ab9-80e2-69b5b7394bc3",
                "dc10e01a-3239-4681-ada6-891a3dd97fa4"
              ],
              "failures": [
                "3b5c5ba3-2107-44b2-8d82-ff51b44b2c55"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea1e0b18-f132-424b-b69a-b271bf8768ee",
              "title": "Integer Validation",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid positive integer",
                  "fullTitle": "Validation Functions Integer Validation should return true for a valid positive integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(42)).to.be.true;",
                  "err": {},
                  "uuid": "c5302e7a-1cab-4595-8d1b-e8f3c0eec8e4",
                  "parentUUID": "ea1e0b18-f132-424b-b69a-b271bf8768ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for zero",
                  "fullTitle": "Validation Functions Integer Validation should return true for zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(0)).to.be.true;",
                  "err": {},
                  "uuid": "1444b71a-7c33-4060-b3ea-a44b77ccad29",
                  "parentUUID": "ea1e0b18-f132-424b-b69a-b271bf8768ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a negative integer",
                  "fullTitle": "Validation Functions Integer Validation should return false for a negative integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(-5)).to.be.false;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/validations.test.js:168:56)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "88146251-2a30-48c5-9125-b78d6f27d03b",
                  "parentUUID": "ea1e0b18-f132-424b-b69a-b271bf8768ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a decimal number",
                  "fullTitle": "Validation Functions Integer Validation should return false for a decimal number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(42.5)).to.be.false;",
                  "err": {},
                  "uuid": "917d2060-a917-4c45-ba95-2eaff3988f78",
                  "parentUUID": "ea1e0b18-f132-424b-b69a-b271bf8768ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-numeric input",
                  "fullTitle": "Validation Functions Integer Validation should return false for non-numeric input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger('forty-two')).to.be.false;",
                  "err": {},
                  "uuid": "331ec367-74dd-470b-bbe4-2ddf00b30f26",
                  "parentUUID": "ea1e0b18-f132-424b-b69a-b271bf8768ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5302e7a-1cab-4595-8d1b-e8f3c0eec8e4",
                "1444b71a-7c33-4060-b3ea-a44b77ccad29",
                "917d2060-a917-4c45-ba95-2eaff3988f78",
                "331ec367-74dd-470b-bbe4-2ddf00b30f26"
              ],
              "failures": [
                "88146251-2a30-48c5-9125-b78d6f27d03b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cd4bd097-e895-426d-8ad2-bf60a0e691e2",
          "title": "Pruebas de la API ventas",
          "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\ventas.test.js",
          "file": "\\test\\ventas.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API ventas\"",
              "fullTitle": "Pruebas de la API ventas \"before all\" hook in \"Pruebas de la API ventas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await ventasModel.obtenerTodo();\n        getId = await ventasModel.obtenerVentaId(1);",
              "err": {},
              "uuid": "bc60d28e-5ff3-4c63-ad27-b120f0d4bdf1",
              "parentUUID": "cd4bd097-e895-426d-8ad2-bf60a0e691e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API ventas\"",
              "fullTitle": "Pruebas de la API ventas \"after all\" hook in \"Pruebas de la API ventas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "c2a401e2-d064-4fd3-bfd2-59a707e203d1",
              "parentUUID": "cd4bd097-e895-426d-8ad2-bf60a0e691e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e121ccb6-8727-4db6-b609-ceefd07c9cc6",
              "title": "Pruebas del metodo GET",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\ventas.test.js",
              "file": "\\test\\ventas.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "0516552d-b447-42ba-b67a-f11af8625073",
                  "parentUUID": "e121ccb6-8727-4db6-b609-ceefd07c9cc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {
                    "message": "AssertionError: expected undefined to be an object",
                    "estack": "AssertionError: expected undefined to be an object\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/ventas.test.js:27:38)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "172ee311-670e-444d-ab91-d37412433b48",
                  "parentUUID": "e121ccb6-8727-4db6-b609-ceefd07c9cc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /ventas",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Devuelve el código de estado 200 para GET /ventas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "e26c7008-e5ba-401a-b522-c80ba40a7207",
                  "parentUUID": "e121ccb6-8727-4db6-b609-ceefd07c9cc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran ventas",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran ventas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "ab58e45c-728d-4764-a2a2-46c66c925346",
                  "parentUUID": "e121ccb6-8727-4db6-b609-ceefd07c9cc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada venta devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Cada venta devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('report_date');\nexpect( getAll[0]).to.have.property('total_sales');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {
                    "message": "AssertionError: Target cannot be null or undefined.",
                    "estack": "AssertionError: Target cannot be null or undefined.\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/ventas.test.js:39:40)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "1c3fafae-6f0b-4838-9d19-70ffa3cf93ab",
                  "parentUUID": "e121ccb6-8727-4db6-b609-ceefd07c9cc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0516552d-b447-42ba-b67a-f11af8625073",
                "e26c7008-e5ba-401a-b522-c80ba40a7207",
                "ab58e45c-728d-4764-a2a2-46c66c925346"
              ],
              "failures": [
                "172ee311-670e-444d-ab91-d37412433b48",
                "1c3fafae-6f0b-4838-9d19-70ffa3cf93ab"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72e92cba-9f16-43cc-90f0-c5f5e1294325",
              "title": "Pruebas del metodo GET venta por id",
              "fullFile": "E:\\Documentos\\GitHub\\El-Fortin-2.0\\ElFortin_APIs\\test\\ventas.test.js",
              "file": "\\test\\ventas.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET venta por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {
                    "message": "AssertionError: expected undefined to be an object",
                    "estack": "AssertionError: expected undefined to be an object\n    at Context.<anonymous> (file:///E:/Documentos/GitHub/El-Fortin-2.0/ElFortin_APIs/test/ventas.test.js:53:33)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "969a479f-9034-4434-986a-125dad9a8460",
                  "parentUUID": "72e92cba-9f16-43cc-90f0-c5f5e1294325",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET venta por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "ed53b97c-520c-4df8-976c-7d4aec5653c3",
                  "parentUUID": "72e92cba-9f16-43cc-90f0-c5f5e1294325",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed53b97c-520c-4df8-976c-7d4aec5653c3"
              ],
              "failures": [
                "969a479f-9034-4434-986a-125dad9a8460"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}