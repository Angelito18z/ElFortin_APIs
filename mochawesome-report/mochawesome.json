{
  "stats": {
    "suites": 31,
    "tests": 94,
    "passes": 94,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-26T05:47:41.972Z",
    "end": "2024-11-26T05:47:42.400Z",
    "duration": 428,
    "testsRegistered": 94,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3085c0d5-eca7-4a53-82b1-c1b8761bfd3f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3067e68e-86d1-4104-83ee-4e105208bdd0",
          "title": "Pruebas de la API Pedidos",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\pedidos.test.js",
          "file": "\\test\\pedidos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API Pedidos\"",
              "fullTitle": "Pruebas de la API Pedidos \"before all\" hook in \"Pruebas de la API Pedidos\"",
              "timedOut": false,
              "duration": 104,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await pedidosModelo.findAll();  // Obtiene todos los pedidos\ngetId = await pedidosModelo.findById(1); // Obtiene el pedido con ID 1\nfirstOrder = getAll[0]; // Extraer el primer pedido para usar en los tests",
              "err": {},
              "uuid": "d1bb12c0-121f-4e3d-938a-4a3ea512e5a6",
              "parentUUID": "3067e68e-86d1-4104-83ee-4e105208bdd0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API Pedidos\"",
              "fullTitle": "Pruebas de la API Pedidos \"after all\" hook in \"Pruebas de la API Pedidos\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "43ea76ee-aaa1-4607-906f-01a7789467b5",
              "parentUUID": "3067e68e-86d1-4104-83ee-4e105208bdd0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "4b0e7c0d-4bc3-48b8-80bf-2c4ef8ec9609",
              "title": "Pruebas del método GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\pedidos.test.js",
              "file": "\\test\\pedidos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Devuelve un array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "7c00b3fd-5f0b-43f3-83d6-66556fadc49e",
                  "parentUUID": "4b0e7c0d-4bc3-48b8-80bf-2c4ef8ec9609",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "8cc117be-1d3f-4ac0-89d7-7feb3ddbb40e",
                  "parentUUID": "4b0e7c0d-4bc3-48b8-80bf-2c4ef8ec9609",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran pedidos",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Devuelve el código de estado 404 si no se encuentran pedidos",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/orders/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "45b28d3d-7dc4-4f26-b58f-890802a3c1aa",
                  "parentUUID": "4b0e7c0d-4bc3-48b8-80bf-2c4ef8ec9609",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada pedido devuelto tiene los campos correctos",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Cada pedido devuelto tiene los campos correctos",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(firstOrder).to.have.property('id');\nexpect(firstOrder).to.have.property('restaurant_id');\nexpect(firstOrder).to.have.property('table_number');\nexpect(firstOrder).to.have.property('total_amount');\nexpect(firstOrder).to.have.property('client_id');\nexpect(firstOrder).to.have.property('pre_tax_total');\nexpect(firstOrder).to.have.property('post_tax_total');\nexpect(firstOrder).to.have.property('payment_method_id');\nexpect(firstOrder).to.have.property('status_id');\nexpect(firstOrder).to.have.property('order_type');\nexpect(firstOrder).to.have.property('discount_id');\nexpect(firstOrder).to.have.property('created_at');\nexpect(firstOrder).to.have.property('updated_at');\nexpect(firstOrder).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "281fac33-2763-4eef-8cdd-096009910544",
                  "parentUUID": "4b0e7c0d-4bc3-48b8-80bf-2c4ef8ec9609",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c00b3fd-5f0b-43f3-83d6-66556fadc49e",
                "8cc117be-1d3f-4ac0-89d7-7feb3ddbb40e",
                "45b28d3d-7dc4-4f26-b58f-890802a3c1aa",
                "281fac33-2763-4eef-8cdd-096009910544"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "962ab55d-6659-4286-bd5b-4a13be6ea793",
              "title": "Pruebas del método GET pedido por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\pedidos.test.js",
              "file": "\\test\\pedidos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET pedido por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "8a1d8e14-fd52-451a-9b71-545c494f4e3c",
                  "parentUUID": "962ab55d-6659-4286-bd5b-4a13be6ea793",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET pedido por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.not.be.an('array');",
                  "err": {},
                  "uuid": "06ceeca8-3049-4a08-86db-19c5504bd9af",
                  "parentUUID": "962ab55d-6659-4286-bd5b-4a13be6ea793",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve un código de estado 404 si el ID no existe",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET pedido por id Devuelve un código de estado 404 si el ID no existe",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/orders/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "8ddc0ba7-7e2d-4e51-ad87-189903e715d6",
                  "parentUUID": "962ab55d-6659-4286-bd5b-4a13be6ea793",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a1d8e14-fd52-451a-9b71-545c494f4e3c",
                "06ceeca8-3049-4a08-86db-19c5504bd9af",
                "8ddc0ba7-7e2d-4e51-ad87-189903e715d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2141cd31-e63b-44a1-a18d-f48dae039481",
          "title": "Pruebas de la API productos",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\productos.test.js",
          "file": "\\test\\productos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API productos\"",
              "fullTitle": "Pruebas de la API productos \"before all\" hook in \"Pruebas de la API productos\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await productModel.findAll();\n        getId = await productModel.findById(1);",
              "err": {},
              "uuid": "2c6651c9-f4c8-4ddf-8460-c318ddc97ecb",
              "parentUUID": "2141cd31-e63b-44a1-a18d-f48dae039481",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API productos\"",
              "fullTitle": "Pruebas de la API productos \"after all\" hook in \"Pruebas de la API productos\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "a89074d1-0e6a-4c0e-8ac9-5e6785cf40f4",
              "parentUUID": "2141cd31-e63b-44a1-a18d-f48dae039481",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "bb697455-745a-4c22-958c-eb8b3424d889",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\productos.test.js",
              "file": "\\test\\productos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "920b9c19-1a8e-4946-b4f5-a1ccbd652eda",
                  "parentUUID": "bb697455-745a-4c22-958c-eb8b3424d889",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "86e62319-6d71-4894-b110-d52f67f646d6",
                  "parentUUID": "bb697455-745a-4c22-958c-eb8b3424d889",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /products",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Devuelve el código de estado 200 para GET /products",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/products');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "663e6714-57b3-43c8-9c1a-ced553190309",
                  "parentUUID": "bb697455-745a-4c22-958c-eb8b3424d889",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran productos",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran productos",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/products/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "bbe6dbdb-1ecd-41ae-bdf4-1c54afc48472",
                  "parentUUID": "bb697455-745a-4c22-958c-eb8b3424d889",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada producto devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Cada producto devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('name');\nexpect( getAll[0]).to.have.property('description');\nexpect( getAll[0]).to.have.property('price');\nexpect( getAll[0]).to.have.property('image_url');\nexpect( getAll[0]).to.have.property('category_name');\nexpect( getAll[0]).to.have.property('pre_tax_cost');\nexpect( getAll[0]).to.have.property('post_tax_cost');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "417b66b0-cc12-4983-bae8-6df0d0903914",
                  "parentUUID": "bb697455-745a-4c22-958c-eb8b3424d889",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "920b9c19-1a8e-4946-b4f5-a1ccbd652eda",
                "86e62319-6d71-4894-b110-d52f67f646d6",
                "663e6714-57b3-43c8-9c1a-ced553190309",
                "bbe6dbdb-1ecd-41ae-bdf4-1c54afc48472",
                "417b66b0-cc12-4983-bae8-6df0d0903914"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3bb66054-b97b-47bc-83ea-89dd405b996b",
              "title": "Pruebas del metodo GET producto por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\productos.test.js",
              "file": "\\test\\productos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET producto por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "2f82a9c9-b02d-47b0-999e-28ba08d19dc7",
                  "parentUUID": "3bb66054-b97b-47bc-83ea-89dd405b996b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET producto por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "d2ffaa5f-fda1-4092-8869-5cb0d2fe03ca",
                  "parentUUID": "3bb66054-b97b-47bc-83ea-89dd405b996b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2f82a9c9-b02d-47b0-999e-28ba08d19dc7",
                "d2ffaa5f-fda1-4092-8869-5cb0d2fe03ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b65b2b02-b77a-4a21-939f-c182daaf7a07",
          "title": "Pruebas de la API promociones",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\promociones.test.js",
          "file": "\\test\\promociones.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API promociones\"",
              "fullTitle": "Pruebas de la API promociones \"before all\" hook in \"Pruebas de la API promociones\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await promocionesModelo.obtenerTodo();\n        getId = await promocionesModelo.obtenerPromocionId(1);",
              "err": {},
              "uuid": "2bf7a4a2-d249-49a4-82cd-d0103fa735a1",
              "parentUUID": "b65b2b02-b77a-4a21-939f-c182daaf7a07",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API promociones\"",
              "fullTitle": "Pruebas de la API promociones \"after all\" hook in \"Pruebas de la API promociones\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "d4939e7b-6ebc-4d19-bd1b-40c008fcd6e5",
              "parentUUID": "b65b2b02-b77a-4a21-939f-c182daaf7a07",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "318cb535-65b5-438c-bd93-a5d7fdd296df",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\promociones.test.js",
              "file": "\\test\\promociones.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "d04b9c09-2bbf-4aca-831a-5003ad8dfbe6",
                  "parentUUID": "318cb535-65b5-438c-bd93-a5d7fdd296df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "a09f9894-653a-49af-ba7b-fa390730ef02",
                  "parentUUID": "318cb535-65b5-438c-bd93-a5d7fdd296df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /promociones",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Devuelve el código de estado 200 para GET /promociones",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/promociones');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "bf029bea-1f94-47cd-8ac5-59a257384120",
                  "parentUUID": "318cb535-65b5-438c-bd93-a5d7fdd296df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran promociones",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran promociones",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/promociones/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "aa65a209-ad72-466b-bc75-f591b9faf5ac",
                  "parentUUID": "318cb535-65b5-438c-bd93-a5d7fdd296df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada promoción devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Cada promoción devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('code');\nexpect( getAll[0]).to.have.property('description');\nexpect( getAll[0]).to.have.property('discount_type');\nexpect( getAll[0]).to.have.property('value');\nexpect( getAll[0]).to.have.property('start_date');\nexpect( getAll[0]).to.have.property('end_date');\nexpect( getAll[0]).to.have.property('active');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "57b189c3-df37-493f-9cf1-49aec69fdf84",
                  "parentUUID": "318cb535-65b5-438c-bd93-a5d7fdd296df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d04b9c09-2bbf-4aca-831a-5003ad8dfbe6",
                "a09f9894-653a-49af-ba7b-fa390730ef02",
                "bf029bea-1f94-47cd-8ac5-59a257384120",
                "aa65a209-ad72-466b-bc75-f591b9faf5ac",
                "57b189c3-df37-493f-9cf1-49aec69fdf84"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5df963c0-f1f1-4789-9d24-6e9dc672403b",
              "title": "Pruebas del metodo GET promocion por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\promociones.test.js",
              "file": "\\test\\promociones.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET promocion por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "2a81ff3a-e22a-4fb7-9857-7f4add6be3af",
                  "parentUUID": "5df963c0-f1f1-4789-9d24-6e9dc672403b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET promocion por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "ad45f169-fbfd-4869-bc9c-88829dd49df8",
                  "parentUUID": "5df963c0-f1f1-4789-9d24-6e9dc672403b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a81ff3a-e22a-4fb7-9857-7f4add6be3af",
                "ad45f169-fbfd-4869-bc9c-88829dd49df8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4929f85a-3a8c-447d-9ada-28eeb59fc6e8",
          "title": "Pruebas de la API proveedores",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\proveedores.test.js",
          "file": "\\test\\proveedores.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API proveedores\"",
              "fullTitle": "Pruebas de la API proveedores \"before all\" hook in \"Pruebas de la API proveedores\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await proveedoresModelo.obtenerTodo();\n        getId = await proveedoresModelo.obtenerProveedorId(1);",
              "err": {},
              "uuid": "798c1e8a-150e-40be-9c33-54ae4de3109f",
              "parentUUID": "4929f85a-3a8c-447d-9ada-28eeb59fc6e8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API proveedores\"",
              "fullTitle": "Pruebas de la API proveedores \"after all\" hook in \"Pruebas de la API proveedores\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "3e8d9076-dcb7-43ca-a58d-537b67d25d46",
              "parentUUID": "4929f85a-3a8c-447d-9ada-28eeb59fc6e8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e742c31b-e621-46d9-ba00-1634650e803a",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\proveedores.test.js",
              "file": "\\test\\proveedores.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "4c5d6c07-9130-4470-b27c-4ae67d1e9974",
                  "parentUUID": "e742c31b-e621-46d9-ba00-1634650e803a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "2f91388d-58b2-45c8-b069-b2c588ef7125",
                  "parentUUID": "e742c31b-e621-46d9-ba00-1634650e803a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /proveedores",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Devuelve el código de estado 200 para GET /proveedores",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/proveedores');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "2a10f146-52e2-4173-acdd-270cd4cd236e",
                  "parentUUID": "e742c31b-e621-46d9-ba00-1634650e803a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran proveedores",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran proveedores",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/proveedores/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "c742bff8-f1b6-43d7-b2e6-baf577676d7b",
                  "parentUUID": "e742c31b-e621-46d9-ba00-1634650e803a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada proveedor devuelto tiene los campos correctos",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Cada proveedor devuelto tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('name');\nexpect( getAll[0]).to.have.property('contact_info');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "ba930f43-1548-47e3-8c2b-103b380e0cb3",
                  "parentUUID": "e742c31b-e621-46d9-ba00-1634650e803a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c5d6c07-9130-4470-b27c-4ae67d1e9974",
                "2f91388d-58b2-45c8-b069-b2c588ef7125",
                "2a10f146-52e2-4173-acdd-270cd4cd236e",
                "c742bff8-f1b6-43d7-b2e6-baf577676d7b",
                "ba930f43-1548-47e3-8c2b-103b380e0cb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e8653633-bcd4-4c0f-81c0-b99d5cf8c44a",
              "title": "Pruebas del metodo GET proveedor por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\proveedores.test.js",
              "file": "\\test\\proveedores.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET proveedor por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "9babac70-e3ee-46d8-a64f-989195becda1",
                  "parentUUID": "e8653633-bcd4-4c0f-81c0-b99d5cf8c44a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET proveedor por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "2af08629-2db7-4028-8213-b0feecec359b",
                  "parentUUID": "e8653633-bcd4-4c0f-81c0-b99d5cf8c44a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9babac70-e3ee-46d8-a64f-989195becda1",
                "2af08629-2db7-4028-8213-b0feecec359b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3c6616bd-365a-4abf-ab4e-cf37246a3fad",
          "title": "Pruebas de la API restaurantes",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\restaurantes.test.js",
          "file": "\\test\\restaurantes.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API restaurantes\"",
              "fullTitle": "Pruebas de la API restaurantes \"before all\" hook in \"Pruebas de la API restaurantes\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await restaurantesModelo.obtenerTodo();\n        getId = await restaurantesModelo.obtenerRestauranteId(1);",
              "err": {},
              "uuid": "2d2b978a-58f6-45f5-b425-0b2eaeb0271f",
              "parentUUID": "3c6616bd-365a-4abf-ab4e-cf37246a3fad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API restaurantes\"",
              "fullTitle": "Pruebas de la API restaurantes \"after all\" hook in \"Pruebas de la API restaurantes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "f8ab9010-b5a6-481e-a8bc-9afb686250ae",
              "parentUUID": "3c6616bd-365a-4abf-ab4e-cf37246a3fad",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e79dfd43-19c8-436f-99e6-23e66e430643",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\restaurantes.test.js",
              "file": "\\test\\restaurantes.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "25d4c670-4f43-43da-95c3-b364839b20a9",
                  "parentUUID": "e79dfd43-19c8-436f-99e6-23e66e430643",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "b74161c5-ad14-4a86-b169-4505bca7bf0d",
                  "parentUUID": "e79dfd43-19c8-436f-99e6-23e66e430643",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /restaurantes",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Devuelve el código de estado 200 para GET /restaurantes",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/restaurantes');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "3b6b8cbc-e91f-4251-83f6-bfb4b4b64a7f",
                  "parentUUID": "e79dfd43-19c8-436f-99e6-23e66e430643",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran restaurantes",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran restaurantes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/restaurantes/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "44f64df5-6d6b-4a68-b767-6715668be802",
                  "parentUUID": "e79dfd43-19c8-436f-99e6-23e66e430643",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada restaurante devuelto tiene los campos correctos",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Cada restaurante devuelto tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('name');\nexpect( getAll[0]).to.have.property('location');\nexpect( getAll[0]).to.have.property('opening_hours');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "974fb7db-f31d-4e77-b4b8-6dff77314489",
                  "parentUUID": "e79dfd43-19c8-436f-99e6-23e66e430643",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25d4c670-4f43-43da-95c3-b364839b20a9",
                "b74161c5-ad14-4a86-b169-4505bca7bf0d",
                "3b6b8cbc-e91f-4251-83f6-bfb4b4b64a7f",
                "44f64df5-6d6b-4a68-b767-6715668be802",
                "974fb7db-f31d-4e77-b4b8-6dff77314489"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6082b55b-4db2-4d89-923b-723a13ce9544",
              "title": "Pruebas del metodo GET restaurante por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\restaurantes.test.js",
              "file": "\\test\\restaurantes.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET restaurante por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "f8d3e057-d4d2-4ef6-8f4d-468716725e1b",
                  "parentUUID": "6082b55b-4db2-4d89-923b-723a13ce9544",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET restaurante por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "a10b4fc8-e066-4644-bc77-44054b091d55",
                  "parentUUID": "6082b55b-4db2-4d89-923b-723a13ce9544",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8d3e057-d4d2-4ef6-8f4d-468716725e1b",
                "a10b4fc8-e066-4644-bc77-44054b091d55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "be534c85-c052-4a6d-aef3-29052eb81558",
          "title": "Pruebas de la API usuarios",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\usuarios.test.js",
          "file": "\\test\\usuarios.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API usuarios\"",
              "fullTitle": "Pruebas de la API usuarios \"before all\" hook in \"Pruebas de la API usuarios\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await usuariosModel.findAll();\n        getId = await usuariosModel.findById(1);",
              "err": {},
              "uuid": "915117b4-d96b-4778-85d8-4ff131ad1f95",
              "parentUUID": "be534c85-c052-4a6d-aef3-29052eb81558",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API usuarios\"",
              "fullTitle": "Pruebas de la API usuarios \"after all\" hook in \"Pruebas de la API usuarios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "2b411da4-93d9-4ed1-b91f-db11363fe12b",
              "parentUUID": "be534c85-c052-4a6d-aef3-29052eb81558",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e710bf3f-32e3-4145-8e99-61cb0aac1349",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\usuarios.test.js",
              "file": "\\test\\usuarios.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "e7fc6e87-b6f6-41e8-ac69-c00b75c65928",
                  "parentUUID": "e710bf3f-32e3-4145-8e99-61cb0aac1349",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "99e1441a-82e9-4668-8288-4074ca3522fb",
                  "parentUUID": "e710bf3f-32e3-4145-8e99-61cb0aac1349",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /usuarios",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Devuelve el código de estado 200 para GET /usuarios",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/usuarios');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "c273fecf-102f-4ab6-90e4-508102ef013a",
                  "parentUUID": "e710bf3f-32e3-4145-8e99-61cb0aac1349",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran usuarios",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran usuarios",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/usuarios/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "3ef56457-4a28-4e59-9be3-a0753a2df741",
                  "parentUUID": "e710bf3f-32e3-4145-8e99-61cb0aac1349",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada usuario devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Cada usuario devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('name');\nexpect( getAll[0]).to.have.property('email');\nexpect( getAll[0]).to.have.property('phone');\nexpect( getAll[0]).to.have.property('image_url');\nexpect( getAll[0]).to.have.property('nickname');\nexpect( getAll[0]).to.have.property('encrypted_password');\nexpect( getAll[0]).to.have.property('salt');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "57fa72bf-7b8d-460b-8ff3-913d9b25ebbf",
                  "parentUUID": "e710bf3f-32e3-4145-8e99-61cb0aac1349",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7fc6e87-b6f6-41e8-ac69-c00b75c65928",
                "99e1441a-82e9-4668-8288-4074ca3522fb",
                "c273fecf-102f-4ab6-90e4-508102ef013a",
                "3ef56457-4a28-4e59-9be3-a0753a2df741",
                "57fa72bf-7b8d-460b-8ff3-913d9b25ebbf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0749afb4-5d5f-4fa8-80ed-361d5c5cef56",
              "title": "Pruebas del metodo GET usuario por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\usuarios.test.js",
              "file": "\\test\\usuarios.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET usuario por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "b30373fd-e524-47a6-a7c1-633f1fde867a",
                  "parentUUID": "0749afb4-5d5f-4fa8-80ed-361d5c5cef56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET usuario por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "6ebb7937-0464-4da9-ae3a-574e3f388ec8",
                  "parentUUID": "0749afb4-5d5f-4fa8-80ed-361d5c5cef56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b30373fd-e524-47a6-a7c1-633f1fde867a",
                "6ebb7937-0464-4da9-ae3a-574e3f388ec8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "128869a6-023d-4c0b-912f-0da0974a6fbe",
          "title": "Validation Functions",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
          "file": "\\test\\validations.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "176d32e0-b1f2-4446-8f3a-a33f1b02781a",
              "title": "SQL Injection Prevention (hasUnsafeCharacters)",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if input contains single quotes",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains single quotes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters(\"O'Reilly\")).to.be.true;",
                  "err": {},
                  "uuid": "0a800efb-0531-4543-9428-21f5ac58655d",
                  "parentUUID": "176d32e0-b1f2-4446-8f3a-a33f1b02781a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains double quotes",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains double quotes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('He said \"Hello\"')).to.be.true;",
                  "err": {},
                  "uuid": "8820aabf-3160-4088-aeec-e46d754c4ec6",
                  "parentUUID": "176d32e0-b1f2-4446-8f3a-a33f1b02781a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains backslash",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains backslash",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('C:\\\\Windows')).to.be.true;",
                  "err": {},
                  "uuid": "a1c93a97-4bcf-4284-8657-f4d57192b473",
                  "parentUUID": "176d32e0-b1f2-4446-8f3a-a33f1b02781a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains semicolon",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains semicolon",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('DROP TABLE users;')).to.be.true;",
                  "err": {},
                  "uuid": "d5b6565f-a2d6-4d23-afd3-6373addc0475",
                  "parentUUID": "176d32e0-b1f2-4446-8f3a-a33f1b02781a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains double dash",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains double dash",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('SELECT * FROM users --')).to.be.true;",
                  "err": {},
                  "uuid": "d7df8383-3fea-42df-bb41-975b47b09296",
                  "parentUUID": "176d32e0-b1f2-4446-8f3a-a33f1b02781a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for safe input",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return false for safe input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('SafeInput123')).to.be.false;",
                  "err": {},
                  "uuid": "c41e9940-b6bb-4fb9-8c21-2b15e5ff7eed",
                  "parentUUID": "176d32e0-b1f2-4446-8f3a-a33f1b02781a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a800efb-0531-4543-9428-21f5ac58655d",
                "8820aabf-3160-4088-aeec-e46d754c4ec6",
                "a1c93a97-4bcf-4284-8657-f4d57192b473",
                "d5b6565f-a2d6-4d23-afd3-6373addc0475",
                "d7df8383-3fea-42df-bb41-975b47b09296",
                "c41e9940-b6bb-4fb9-8c21-2b15e5ff7eed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8dccc3fd-fff0-44ba-861e-7d6ec0fd4c7d",
              "title": "Category Name Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid category name",
                  "fullTitle": "Validation Functions Category Name Validation should return true for a valid category name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('Desserts')).to.be.true;",
                  "err": {},
                  "uuid": "05c00bb3-197f-45e9-a102-a4ef8a62adde",
                  "parentUUID": "8dccc3fd-fff0-44ba-861e-7d6ec0fd4c7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a name with special characters",
                  "fullTitle": "Validation Functions Category Name Validation should return false for a name with special characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName(\"Cakes@2024\")).to.be.false;",
                  "err": {},
                  "uuid": "6e93b8a7-68a9-4d9f-a063-1ba48664bf1f",
                  "parentUUID": "8dccc3fd-fff0-44ba-861e-7d6ec0fd4c7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an empty string",
                  "fullTitle": "Validation Functions Category Name Validation should return false for an empty string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('')).to.be.false;",
                  "err": {},
                  "uuid": "846b42b5-d89b-4282-bd52-8e83f128391b",
                  "parentUUID": "8dccc3fd-fff0-44ba-861e-7d6ec0fd4c7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a name exceeding 50 characters",
                  "fullTitle": "Validation Functions Category Name Validation should return false for a name exceeding 50 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('a'.repeat(51))).to.be.false;",
                  "err": {},
                  "uuid": "515d273d-14d1-4aae-80e1-ad0b89a32820",
                  "parentUUID": "8dccc3fd-fff0-44ba-861e-7d6ec0fd4c7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a name with exactly 50 characters",
                  "fullTitle": "Validation Functions Category Name Validation should return true for a name with exactly 50 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('a'.repeat(50))).to.be.true;",
                  "err": {},
                  "uuid": "3e517ef0-cef6-4ac1-ae28-baa289c5132a",
                  "parentUUID": "8dccc3fd-fff0-44ba-861e-7d6ec0fd4c7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05c00bb3-197f-45e9-a102-a4ef8a62adde",
                "6e93b8a7-68a9-4d9f-a063-1ba48664bf1f",
                "846b42b5-d89b-4282-bd52-8e83f128391b",
                "515d273d-14d1-4aae-80e1-ad0b89a32820",
                "3e517ef0-cef6-4ac1-ae28-baa289c5132a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e43fc0fd-4c39-4c1b-936f-5a90958de5b3",
              "title": "Email Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid email address",
                  "fullTitle": "Validation Functions Email Validation should return true for a valid email address",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test@example.com')).to.be.true;",
                  "err": {},
                  "uuid": "20a7ed99-5683-42e2-aa60-a4733b0cff44",
                  "parentUUID": "e43fc0fd-4c39-4c1b-936f-5a90958de5b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email without \"@\"",
                  "fullTitle": "Validation Functions Email Validation should return false for an email without \"@\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('testexample.com')).to.be.false;",
                  "err": {},
                  "uuid": "c8894da6-33f1-4731-81f3-3d2f3682f2b0",
                  "parentUUID": "e43fc0fd-4c39-4c1b-936f-5a90958de5b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email without domain",
                  "fullTitle": "Validation Functions Email Validation should return false for an email without domain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test@.com')).to.be.false;",
                  "err": {},
                  "uuid": "6c3158d0-bc7f-4362-ad09-a037739d22f7",
                  "parentUUID": "e43fc0fd-4c39-4c1b-936f-5a90958de5b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email with spaces",
                  "fullTitle": "Validation Functions Email Validation should return false for an email with spaces",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test @example.com')).to.be.false;",
                  "err": {},
                  "uuid": "44d80bf9-734e-4d3f-b466-d63ec101bb56",
                  "parentUUID": "e43fc0fd-4c39-4c1b-936f-5a90958de5b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email with SQL injection characters",
                  "fullTitle": "Validation Functions Email Validation should return false for an email with SQL injection characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test@example.com; DROP TABLE users;')).to.be.false;",
                  "err": {},
                  "uuid": "6cb3b921-93a1-457b-b358-544dd2323442",
                  "parentUUID": "e43fc0fd-4c39-4c1b-936f-5a90958de5b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20a7ed99-5683-42e2-aa60-a4733b0cff44",
                "c8894da6-33f1-4731-81f3-3d2f3682f2b0",
                "6c3158d0-bc7f-4362-ad09-a037739d22f7",
                "44d80bf9-734e-4d3f-b466-d63ec101bb56",
                "6cb3b921-93a1-457b-b358-544dd2323442"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "01bc0fc3-7780-49aa-b1fd-8cdb02b2fef7",
              "title": "Password Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid password",
                  "fullTitle": "Validation Functions Password Validation should return true for a valid password",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('SecurePass123!')).to.be.true;",
                  "err": {},
                  "uuid": "a94b5219-bc10-4978-878d-20d0386499b2",
                  "parentUUID": "01bc0fc3-7780-49aa-b1fd-8cdb02b2fef7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password shorter than 8 characters",
                  "fullTitle": "Validation Functions Password Validation should return false for a password shorter than 8 characters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('Short1')).to.be.false;",
                  "err": {},
                  "uuid": "06b8e60a-2a31-4db3-bc02-9d3ce7a575dd",
                  "parentUUID": "01bc0fc3-7780-49aa-b1fd-8cdb02b2fef7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password longer than 20 characters",
                  "fullTitle": "Validation Functions Password Validation should return false for a password longer than 20 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('a'.repeat(21))).to.be.false;",
                  "err": {},
                  "uuid": "0b133530-4643-4894-bd1a-9b72baf4aedc",
                  "parentUUID": "01bc0fc3-7780-49aa-b1fd-8cdb02b2fef7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password without numbers",
                  "fullTitle": "Validation Functions Password Validation should return false for a password without numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('PasswordOnly')).to.be.false;",
                  "err": {},
                  "uuid": "a5d72672-a645-4543-bad6-94a9ee0703ea",
                  "parentUUID": "01bc0fc3-7780-49aa-b1fd-8cdb02b2fef7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password with spaces",
                  "fullTitle": "Validation Functions Password Validation should return false for a password with spaces",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('Pass word123')).to.be.false;",
                  "err": {},
                  "uuid": "096ea567-2022-4b73-bd81-0183fbf7eacc",
                  "parentUUID": "01bc0fc3-7780-49aa-b1fd-8cdb02b2fef7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password with SQL injection patterns",
                  "fullTitle": "Validation Functions Password Validation should return false for a password with SQL injection patterns",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('Passw0rd;--')).to.be.false;",
                  "err": {},
                  "uuid": "c19d3ebf-d9a4-4950-963c-ad95dc413d6d",
                  "parentUUID": "01bc0fc3-7780-49aa-b1fd-8cdb02b2fef7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a94b5219-bc10-4978-878d-20d0386499b2",
                "06b8e60a-2a31-4db3-bc02-9d3ce7a575dd",
                "0b133530-4643-4894-bd1a-9b72baf4aedc",
                "a5d72672-a645-4543-bad6-94a9ee0703ea",
                "096ea567-2022-4b73-bd81-0183fbf7eacc",
                "c19d3ebf-d9a4-4950-963c-ad95dc413d6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fbb40343-4537-4cad-b665-1c3e76add2d6",
              "title": "Phone Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid 10-digit phone number",
                  "fullTitle": "Validation Functions Phone Validation should return true for a valid 10-digit phone number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('1234567890')).to.be.true;",
                  "err": {},
                  "uuid": "c7edb27b-3b65-40a4-860c-2f798af1d981",
                  "parentUUID": "fbb40343-4537-4cad-b665-1c3e76add2d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number with letters",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number with letters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('123ABC7890')).to.be.false;",
                  "err": {},
                  "uuid": "47f92a08-d435-4fdf-b547-6c0ae7af250c",
                  "parentUUID": "fbb40343-4537-4cad-b665-1c3e76add2d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number with special characters",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number with special characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('123-456-7890')).to.be.false;",
                  "err": {},
                  "uuid": "cff368dd-80a4-470f-a0d9-793287b87b4c",
                  "parentUUID": "fbb40343-4537-4cad-b665-1c3e76add2d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number shorter than 10 digits",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number shorter than 10 digits",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('12345')).to.be.false;",
                  "err": {},
                  "uuid": "81474d10-cbd5-41ac-954f-38da02978c05",
                  "parentUUID": "fbb40343-4537-4cad-b665-1c3e76add2d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number longer than 10 digits",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number longer than 10 digits",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('123456789012')).to.be.false;",
                  "err": {},
                  "uuid": "096e5877-1819-429a-80e3-35d5e7e695d4",
                  "parentUUID": "fbb40343-4537-4cad-b665-1c3e76add2d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7edb27b-3b65-40a4-860c-2f798af1d981",
                "47f92a08-d435-4fdf-b547-6c0ae7af250c",
                "cff368dd-80a4-470f-a0d9-793287b87b4c",
                "81474d10-cbd5-41ac-954f-38da02978c05",
                "096e5877-1819-429a-80e3-35d5e7e695d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70386255-e366-49f3-8a4d-bda1770d2319",
              "title": "Price Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid price",
                  "fullTitle": "Validation Functions Price Validation should return true for a valid price",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice(99.99)).to.be.true;",
                  "err": {},
                  "uuid": "f278805e-f9d1-46d8-a53a-d6169e86d393",
                  "parentUUID": "70386255-e366-49f3-8a4d-bda1770d2319",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a negative price",
                  "fullTitle": "Validation Functions Price Validation should return false for a negative price",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice(-9.99)).to.be.false;",
                  "err": {},
                  "uuid": "077f11e4-639b-4b11-b8d2-5ac3dba59bdf",
                  "parentUUID": "70386255-e366-49f3-8a4d-bda1770d2319",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a price of 0",
                  "fullTitle": "Validation Functions Price Validation should return true for a price of 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice(0)).to.be.true;",
                  "err": {},
                  "uuid": "bc768f3e-914c-4a41-8bd8-35b49be80260",
                  "parentUUID": "70386255-e366-49f3-8a4d-bda1770d2319",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-numeric input",
                  "fullTitle": "Validation Functions Price Validation should return false for non-numeric input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice('fifty')).to.be.false;",
                  "err": {},
                  "uuid": "c67ca831-8459-4351-9910-b13878098914",
                  "parentUUID": "70386255-e366-49f3-8a4d-bda1770d2319",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f278805e-f9d1-46d8-a53a-d6169e86d393",
                "077f11e4-639b-4b11-b8d2-5ac3dba59bdf",
                "bc768f3e-914c-4a41-8bd8-35b49be80260",
                "c67ca831-8459-4351-9910-b13878098914"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "746f449a-e61a-4806-bd4c-4d03149684d2",
              "title": "Rating Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid rating of 1",
                  "fullTitle": "Validation Functions Rating Validation should return true for a valid rating of 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(1)).to.be.true;",
                  "err": {},
                  "uuid": "cf935027-7116-49e0-9360-4cc20f804a7e",
                  "parentUUID": "746f449a-e61a-4806-bd4c-4d03149684d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a valid rating of 5",
                  "fullTitle": "Validation Functions Rating Validation should return true for a valid rating of 5",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(5)).to.be.true;",
                  "err": {},
                  "uuid": "d6be33d4-cac3-487e-b22c-cde5c0588014",
                  "parentUUID": "746f449a-e61a-4806-bd4c-4d03149684d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a rating less than 1",
                  "fullTitle": "Validation Functions Rating Validation should return false for a rating less than 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(0)).to.be.false;",
                  "err": {},
                  "uuid": "01f9277f-dbfc-4570-8691-74d7ee86178e",
                  "parentUUID": "746f449a-e61a-4806-bd4c-4d03149684d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a rating greater than 5",
                  "fullTitle": "Validation Functions Rating Validation should return false for a rating greater than 5",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(6)).to.be.false;",
                  "err": {},
                  "uuid": "1373d81a-b7c5-4238-9ff3-cf09c9ada424",
                  "parentUUID": "746f449a-e61a-4806-bd4c-4d03149684d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a decimal rating",
                  "fullTitle": "Validation Functions Rating Validation should return false for a decimal rating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(4.5)).to.be.false;",
                  "err": {},
                  "uuid": "1563cd8f-2c1c-429f-9454-d457aab4dbcb",
                  "parentUUID": "746f449a-e61a-4806-bd4c-4d03149684d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-numeric rating",
                  "fullTitle": "Validation Functions Rating Validation should return false for non-numeric rating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating('excellent')).to.be.false;",
                  "err": {},
                  "uuid": "93a63b66-21ce-492a-b729-b8672b61ca0a",
                  "parentUUID": "746f449a-e61a-4806-bd4c-4d03149684d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf935027-7116-49e0-9360-4cc20f804a7e",
                "d6be33d4-cac3-487e-b22c-cde5c0588014",
                "01f9277f-dbfc-4570-8691-74d7ee86178e",
                "1373d81a-b7c5-4238-9ff3-cf09c9ada424",
                "1563cd8f-2c1c-429f-9454-d457aab4dbcb",
                "93a63b66-21ce-492a-b729-b8672b61ca0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14bfaca5-964e-4f1f-a450-3fd2f82b18b9",
              "title": "Date Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid date",
                  "fullTitle": "Validation Functions Date Validation should return true for a valid date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('2024-11-31')).to.be.true;",
                  "err": {},
                  "uuid": "5ada1b72-cf3d-41a3-b104-8394b2dd8e00",
                  "parentUUID": "14bfaca5-964e-4f1f-a450-3fd2f82b18b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an invalid date format",
                  "fullTitle": "Validation Functions Date Validation should return false for an invalid date format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('31/12/2024')).to.be.false;",
                  "err": {},
                  "uuid": "8ea5f7ef-e790-4b54-a9fd-765c391aecd4",
                  "parentUUID": "14bfaca5-964e-4f1f-a450-3fd2f82b18b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-date strings",
                  "fullTitle": "Validation Functions Date Validation should return false for non-date strings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('not-a-date')).to.be.false;",
                  "err": {},
                  "uuid": "beeaf83a-5899-4b53-b218-012b0dfe1a36",
                  "parentUUID": "14bfaca5-964e-4f1f-a450-3fd2f82b18b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ada1b72-cf3d-41a3-b104-8394b2dd8e00",
                "8ea5f7ef-e790-4b54-a9fd-765c391aecd4",
                "beeaf83a-5899-4b53-b218-012b0dfe1a36"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a23ac9f-b266-477a-a2f0-ffbf8fabc8c8",
              "title": "Integer Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid positive integer",
                  "fullTitle": "Validation Functions Integer Validation should return true for a valid positive integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(42)).to.be.true;",
                  "err": {},
                  "uuid": "292f802f-76c4-4eab-9a00-6f2d07657a32",
                  "parentUUID": "7a23ac9f-b266-477a-a2f0-ffbf8fabc8c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for zero",
                  "fullTitle": "Validation Functions Integer Validation should return true for zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(0)).to.be.true;",
                  "err": {},
                  "uuid": "1a56dbeb-2f90-4cb8-bc5e-a5e3f8a999d6",
                  "parentUUID": "7a23ac9f-b266-477a-a2f0-ffbf8fabc8c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a negative integer",
                  "fullTitle": "Validation Functions Integer Validation should return false for a negative integer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(-5)).to.be.false;",
                  "err": {},
                  "uuid": "9906b1d9-0770-46f1-9f09-b44977802700",
                  "parentUUID": "7a23ac9f-b266-477a-a2f0-ffbf8fabc8c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a decimal number",
                  "fullTitle": "Validation Functions Integer Validation should return false for a decimal number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(42.5)).to.be.false;",
                  "err": {},
                  "uuid": "63a0f651-2943-4119-974c-2aa052ec0fcf",
                  "parentUUID": "7a23ac9f-b266-477a-a2f0-ffbf8fabc8c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-numeric input",
                  "fullTitle": "Validation Functions Integer Validation should return false for non-numeric input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger('forty-two')).to.be.false;",
                  "err": {},
                  "uuid": "f7ab71fd-c32b-4e16-832e-dd6fcb0e9955",
                  "parentUUID": "7a23ac9f-b266-477a-a2f0-ffbf8fabc8c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "292f802f-76c4-4eab-9a00-6f2d07657a32",
                "1a56dbeb-2f90-4cb8-bc5e-a5e3f8a999d6",
                "9906b1d9-0770-46f1-9f09-b44977802700",
                "63a0f651-2943-4119-974c-2aa052ec0fcf",
                "f7ab71fd-c32b-4e16-832e-dd6fcb0e9955"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f970131-197a-450a-b7b0-f4b07e8a7234",
          "title": "Pruebas de la API ventas",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\ventas.test.js",
          "file": "\\test\\ventas.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API ventas\"",
              "fullTitle": "Pruebas de la API ventas \"before all\" hook in \"Pruebas de la API ventas\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await ventasModel.obtenerTodo();\n        getId = await ventasModel.obtenerVentaId(1);",
              "err": {},
              "uuid": "57f0086d-2266-4d74-8e76-348809838111",
              "parentUUID": "1f970131-197a-450a-b7b0-f4b07e8a7234",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API ventas\"",
              "fullTitle": "Pruebas de la API ventas \"after all\" hook in \"Pruebas de la API ventas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "72a1b7ba-7c02-44d3-b2ff-b650f2360c9e",
              "parentUUID": "1f970131-197a-450a-b7b0-f4b07e8a7234",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3bcc6f8a-874f-417f-8541-4cfe8e8937d2",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\ventas.test.js",
              "file": "\\test\\ventas.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "908d1a6d-2e39-4209-b5f8-c98bb355c538",
                  "parentUUID": "3bcc6f8a-874f-417f-8541-4cfe8e8937d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "725a697e-809d-4902-bf76-8f80eb9fe2b8",
                  "parentUUID": "3bcc6f8a-874f-417f-8541-4cfe8e8937d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /ventas",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Devuelve el código de estado 200 para GET /ventas",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "568776d3-3a09-4895-8805-23cbe94afa1b",
                  "parentUUID": "3bcc6f8a-874f-417f-8541-4cfe8e8937d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran ventas",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran ventas",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "096a8598-0b7e-4bf3-9243-1724b7a0e4b0",
                  "parentUUID": "3bcc6f8a-874f-417f-8541-4cfe8e8937d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada venta devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Cada venta devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('report_date');\nexpect( getAll[0]).to.have.property('total_sales');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "ec602ffc-5da7-4afc-9183-7a0cccc14e95",
                  "parentUUID": "3bcc6f8a-874f-417f-8541-4cfe8e8937d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "908d1a6d-2e39-4209-b5f8-c98bb355c538",
                "725a697e-809d-4902-bf76-8f80eb9fe2b8",
                "568776d3-3a09-4895-8805-23cbe94afa1b",
                "096a8598-0b7e-4bf3-9243-1724b7a0e4b0",
                "ec602ffc-5da7-4afc-9183-7a0cccc14e95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a8cb294-6ed0-4546-b668-f464691ede4f",
              "title": "Pruebas del metodo GET venta por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\ventas.test.js",
              "file": "\\test\\ventas.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET venta por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "b8a7e153-e19c-4670-87c2-4dc94920a150",
                  "parentUUID": "4a8cb294-6ed0-4546-b668-f464691ede4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET venta por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "e9155eec-d0e0-4813-9f12-83d27b57823a",
                  "parentUUID": "4a8cb294-6ed0-4546-b668-f464691ede4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8a7e153-e19c-4670-87c2-4dc94920a150",
                "e9155eec-d0e0-4813-9f12-83d27b57823a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}