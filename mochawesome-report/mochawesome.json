{
  "stats": {
    "suites": 29,
    "tests": 88,
    "passes": 80,
    "pending": 0,
    "failures": 8,
    "start": "2024-11-26T04:13:28.270Z",
    "end": "2024-11-26T04:13:28.647Z",
    "duration": 377,
    "testsRegistered": 95,
    "passPercent": 84.21052631578947,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 7,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "96ea2a2e-6bab-4e6c-ae4c-293e3c9406b7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fa36a8b8-a7da-4e0d-a83c-57f10be7f9b3",
          "title": "Pruebas de la API Pedidos",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\pedidos.test.js",
          "file": "\\test\\pedidos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API Pedidos\"",
              "fullTitle": "Pruebas de la API Pedidos \"before all\" hook in \"Pruebas de la API Pedidos\"",
              "timedOut": false,
              "duration": 101,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await pedidosModelo.findAll();  // Obtiene todos los pedidos\ngetId = await pedidosModelo.findById(1); // Obtiene el pedido con ID 1\nfirstOrder = getAll[0]; // Extraer el primer pedido para usar en los tests",
              "err": {},
              "uuid": "450a1778-c452-4c81-82b5-8ac7f1786abf",
              "parentUUID": "fa36a8b8-a7da-4e0d-a83c-57f10be7f9b3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API Pedidos\"",
              "fullTitle": "Pruebas de la API Pedidos \"after all\" hook in \"Pruebas de la API Pedidos\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "2c73d99b-6adc-4a11-bbbd-a6420aa8310a",
              "parentUUID": "fa36a8b8-a7da-4e0d-a83c-57f10be7f9b3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c25beb72-d068-423b-b6b3-610be00c147b",
              "title": "Pruebas del método GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\pedidos.test.js",
              "file": "\\test\\pedidos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Devuelve un array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "67edd8d9-17ae-4d23-a94d-eec866ae00bc",
                  "parentUUID": "c25beb72-d068-423b-b6b3-610be00c147b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "791fedd3-11dc-4adf-b3a2-ab8a77e4dcaa",
                  "parentUUID": "c25beb72-d068-423b-b6b3-610be00c147b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran pedidos",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Devuelve el código de estado 404 si no se encuentran pedidos",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/orders/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "fd6845ae-6e1a-4adb-bf34-a1204b99a2a1",
                  "parentUUID": "c25beb72-d068-423b-b6b3-610be00c147b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada pedido devuelto tiene los campos correctos",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET Cada pedido devuelto tiene los campos correctos",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(firstOrder).to.have.property('id');\nexpect(firstOrder).to.have.property('restaurant_id');\nexpect(firstOrder).to.have.property('table_number');\nexpect(firstOrder).to.have.property('total_amount');\nexpect(firstOrder).to.have.property('client_id');\nexpect(firstOrder).to.have.property('pre_tax_total');\nexpect(firstOrder).to.have.property('post_tax_total');\nexpect(firstOrder).to.have.property('payment_method_id');\nexpect(firstOrder).to.have.property('status_id');\nexpect(firstOrder).to.have.property('order_type');\nexpect(firstOrder).to.have.property('discount_id');\nexpect(firstOrder).to.have.property('created_at');\nexpect(firstOrder).to.have.property('updated_at');\nexpect(firstOrder).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "f0a60af1-5f11-4ff8-addd-016f4f7a0bbb",
                  "parentUUID": "c25beb72-d068-423b-b6b3-610be00c147b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67edd8d9-17ae-4d23-a94d-eec866ae00bc",
                "791fedd3-11dc-4adf-b3a2-ab8a77e4dcaa",
                "fd6845ae-6e1a-4adb-bf34-a1204b99a2a1",
                "f0a60af1-5f11-4ff8-addd-016f4f7a0bbb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 37,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90f28d46-d6db-4b33-bea3-249b571d73d6",
              "title": "Pruebas del método GET pedido por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\pedidos.test.js",
              "file": "\\test\\pedidos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET pedido por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "118348af-5385-48d3-ac6b-58f28f5d13cd",
                  "parentUUID": "90f28d46-d6db-4b33-bea3-249b571d73d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET pedido por id No devuelve un array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.not.be.an('array');",
                  "err": {},
                  "uuid": "964a4b03-1532-4821-b457-bec9f5012dfb",
                  "parentUUID": "90f28d46-d6db-4b33-bea3-249b571d73d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve un código de estado 404 si el ID no existe",
                  "fullTitle": "Pruebas de la API Pedidos Pruebas del método GET pedido por id Devuelve un código de estado 404 si el ID no existe",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/orders/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "06f82fd3-6790-47db-a422-523aa447e29a",
                  "parentUUID": "90f28d46-d6db-4b33-bea3-249b571d73d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "118348af-5385-48d3-ac6b-58f28f5d13cd",
                "964a4b03-1532-4821-b457-bec9f5012dfb",
                "06f82fd3-6790-47db-a422-523aa447e29a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "95f68e47-a090-4ea0-b7ae-95960069ebcd",
          "title": "Pruebas de la API productos",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\productos.test.js",
          "file": "\\test\\productos.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API productos\"",
              "fullTitle": "Pruebas de la API productos \"before all\" hook in \"Pruebas de la API productos\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await productModel.findAll();\n        getId = await productModel.findById(1);",
              "err": {},
              "uuid": "40029da0-2608-484f-9319-4ee77db9ad05",
              "parentUUID": "95f68e47-a090-4ea0-b7ae-95960069ebcd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API productos\"",
              "fullTitle": "Pruebas de la API productos \"after all\" hook in \"Pruebas de la API productos\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "f7d36184-2b82-4b38-b69e-1521a289d53c",
              "parentUUID": "95f68e47-a090-4ea0-b7ae-95960069ebcd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "5366f44e-1f3f-41aa-ad5a-5cf0ddfd4a7c",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\productos.test.js",
              "file": "\\test\\productos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "3207b8d2-d714-4c6b-b542-94d64cdaa06f",
                  "parentUUID": "5366f44e-1f3f-41aa-ad5a-5cf0ddfd4a7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "11fee0c4-50bd-4efc-a117-ca2734e7f068",
                  "parentUUID": "5366f44e-1f3f-41aa-ad5a-5cf0ddfd4a7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /products",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Devuelve el código de estado 200 para GET /products",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/products');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "dbcab3e1-aa7d-4ff7-b155-9721757e4157",
                  "parentUUID": "5366f44e-1f3f-41aa-ad5a-5cf0ddfd4a7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran productos",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran productos",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/products/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "2238036a-7031-4732-8b8d-6369f299d88e",
                  "parentUUID": "5366f44e-1f3f-41aa-ad5a-5cf0ddfd4a7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada producto devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET Cada producto devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('name');\nexpect( getAll[0]).to.have.property('description');\nexpect( getAll[0]).to.have.property('price');\nexpect( getAll[0]).to.have.property('image_url');\nexpect( getAll[0]).to.have.property('category_name');\nexpect( getAll[0]).to.have.property('pre_tax_cost');\nexpect( getAll[0]).to.have.property('post_tax_cost');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "a395664b-87ac-42b9-b3be-67cfa7549033",
                  "parentUUID": "5366f44e-1f3f-41aa-ad5a-5cf0ddfd4a7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3207b8d2-d714-4c6b-b542-94d64cdaa06f",
                "11fee0c4-50bd-4efc-a117-ca2734e7f068",
                "dbcab3e1-aa7d-4ff7-b155-9721757e4157",
                "2238036a-7031-4732-8b8d-6369f299d88e",
                "a395664b-87ac-42b9-b3be-67cfa7549033"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb4fd0ee-d948-4354-858e-bb81ece7d3c6",
              "title": "Pruebas del metodo GET producto por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\productos.test.js",
              "file": "\\test\\productos.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET producto por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "cc96f2b0-5256-4250-b718-1cd59348e0ac",
                  "parentUUID": "fb4fd0ee-d948-4354-858e-bb81ece7d3c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API productos Pruebas del metodo GET producto por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "0247092f-3b6c-471b-ae6e-cb5cf522f1fb",
                  "parentUUID": "fb4fd0ee-d948-4354-858e-bb81ece7d3c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc96f2b0-5256-4250-b718-1cd59348e0ac",
                "0247092f-3b6c-471b-ae6e-cb5cf522f1fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "72a90d4d-22d4-44a1-a374-376ced7d5058",
          "title": "Pruebas de la API promociones",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\promociones.test.js",
          "file": "\\test\\promociones.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API promociones\"",
              "fullTitle": "Pruebas de la API promociones \"before all\" hook in \"Pruebas de la API promociones\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await promocionesModelo.obtenerTodo();\n        getId = await promocionesModelo.obtenerPromocionId(1);",
              "err": {},
              "uuid": "1521faae-0ed2-48c8-9f08-185e4ae180f8",
              "parentUUID": "72a90d4d-22d4-44a1-a374-376ced7d5058",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API promociones\"",
              "fullTitle": "Pruebas de la API promociones \"after all\" hook in \"Pruebas de la API promociones\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "8f3d73aa-6c5a-4d9a-8e54-0710f57e0d00",
              "parentUUID": "72a90d4d-22d4-44a1-a374-376ced7d5058",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "33b82a29-6e8b-4c7a-999e-fc3dd94fb0da",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\promociones.test.js",
              "file": "\\test\\promociones.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "4eccf0e7-054f-4d02-8bb8-78f1aecfdce3",
                  "parentUUID": "33b82a29-6e8b-4c7a-999e-fc3dd94fb0da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "d5e08d34-6a8f-45b0-92cc-5d17c740e491",
                  "parentUUID": "33b82a29-6e8b-4c7a-999e-fc3dd94fb0da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /promociones",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Devuelve el código de estado 200 para GET /promociones",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/promociones');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "28435ada-a584-49aa-8a7a-d8500b32e689",
                  "parentUUID": "33b82a29-6e8b-4c7a-999e-fc3dd94fb0da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran promociones",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran promociones",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/promociones/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "bde233f3-c710-4ca5-a410-3f00cc14d281",
                  "parentUUID": "33b82a29-6e8b-4c7a-999e-fc3dd94fb0da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada promoción devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET Cada promoción devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('code');\nexpect( getAll[0]).to.have.property('description');\nexpect( getAll[0]).to.have.property('discount_type');\nexpect( getAll[0]).to.have.property('value');\nexpect( getAll[0]).to.have.property('start_date');\nexpect( getAll[0]).to.have.property('end_date');\nexpect( getAll[0]).to.have.property('active');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "90b27772-edb8-424d-95dc-e9303940567b",
                  "parentUUID": "33b82a29-6e8b-4c7a-999e-fc3dd94fb0da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4eccf0e7-054f-4d02-8bb8-78f1aecfdce3",
                "d5e08d34-6a8f-45b0-92cc-5d17c740e491",
                "28435ada-a584-49aa-8a7a-d8500b32e689",
                "bde233f3-c710-4ca5-a410-3f00cc14d281",
                "90b27772-edb8-424d-95dc-e9303940567b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4b799c0-1b5d-4cfb-b567-f2402afed24c",
              "title": "Pruebas del metodo GET promocion por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\promociones.test.js",
              "file": "\\test\\promociones.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET promocion por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "e18252b7-a4b9-486a-856a-3532f4efb203",
                  "parentUUID": "b4b799c0-1b5d-4cfb-b567-f2402afed24c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API promociones Pruebas del metodo GET promocion por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "6ed68927-356b-4da6-9076-face3d957fbf",
                  "parentUUID": "b4b799c0-1b5d-4cfb-b567-f2402afed24c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e18252b7-a4b9-486a-856a-3532f4efb203",
                "6ed68927-356b-4da6-9076-face3d957fbf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8e11c04e-c0c5-4e41-ac27-fceaf146ccb5",
          "title": "Pruebas de la API proveedores",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\proveedores.test.js",
          "file": "\\test\\proveedores.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API proveedores\"",
              "fullTitle": "Pruebas de la API proveedores \"before all\" hook in \"Pruebas de la API proveedores\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await proveedoresModelo.obtenerTodo();\n        getId = await proveedoresModelo.obtenerProveedorId(1);",
              "err": {},
              "uuid": "d77ffbe7-fc8e-4729-b24e-766e57ba8ef7",
              "parentUUID": "8e11c04e-c0c5-4e41-ac27-fceaf146ccb5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API proveedores\"",
              "fullTitle": "Pruebas de la API proveedores \"after all\" hook in \"Pruebas de la API proveedores\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "9970aa01-a90a-427c-83c5-8e7259f55635",
              "parentUUID": "8e11c04e-c0c5-4e41-ac27-fceaf146ccb5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a665bb30-03ce-4a6e-8adb-0d23fb4c6035",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\proveedores.test.js",
              "file": "\\test\\proveedores.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "3cfe5e4f-736f-45c2-ba61-9c830a814c7b",
                  "parentUUID": "a665bb30-03ce-4a6e-8adb-0d23fb4c6035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "cfbbb8a0-bf66-4f61-ad8d-a8e9345ce41d",
                  "parentUUID": "a665bb30-03ce-4a6e-8adb-0d23fb4c6035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /proveedores",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Devuelve el código de estado 200 para GET /proveedores",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/proveedores');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "5e6f4059-8467-4042-8b1a-ff86510099f2",
                  "parentUUID": "a665bb30-03ce-4a6e-8adb-0d23fb4c6035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran proveedores",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran proveedores",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/proveedores/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "b28b990a-b594-41bb-b667-8ca59d9c1411",
                  "parentUUID": "a665bb30-03ce-4a6e-8adb-0d23fb4c6035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada proveedor devuelto tiene los campos correctos",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET Cada proveedor devuelto tiene los campos correctos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('name');\nexpect( getAll[0]).to.have.property('contact_info');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "d77278d5-1af2-45b0-99cb-def8de58979e",
                  "parentUUID": "a665bb30-03ce-4a6e-8adb-0d23fb4c6035",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3cfe5e4f-736f-45c2-ba61-9c830a814c7b",
                "cfbbb8a0-bf66-4f61-ad8d-a8e9345ce41d",
                "5e6f4059-8467-4042-8b1a-ff86510099f2",
                "b28b990a-b594-41bb-b667-8ca59d9c1411",
                "d77278d5-1af2-45b0-99cb-def8de58979e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "07546252-41e7-4796-b5e8-3b2080d1819c",
              "title": "Pruebas del metodo GET proveedor por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\proveedores.test.js",
              "file": "\\test\\proveedores.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET proveedor por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "99d17abb-a01e-4136-a39a-da830b346139",
                  "parentUUID": "07546252-41e7-4796-b5e8-3b2080d1819c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API proveedores Pruebas del metodo GET proveedor por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "48b09465-bff6-44e6-9a9a-8762bfa71779",
                  "parentUUID": "07546252-41e7-4796-b5e8-3b2080d1819c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99d17abb-a01e-4136-a39a-da830b346139",
                "48b09465-bff6-44e6-9a9a-8762bfa71779"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f11daf50-56b0-4000-a878-61087cf47af0",
          "title": "Pruebas de la API restaurantes",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\restaurantes.test.js",
          "file": "\\test\\restaurantes.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API restaurantes\"",
              "fullTitle": "Pruebas de la API restaurantes \"before all\" hook in \"Pruebas de la API restaurantes\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await restaurantesModelo.obtenerTodo();\n        getId = await restaurantesModelo.obtenerRestauranteId(1);",
              "err": {},
              "uuid": "2fed9365-d6a3-4f7d-a714-b51a69379bfa",
              "parentUUID": "f11daf50-56b0-4000-a878-61087cf47af0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API restaurantes\"",
              "fullTitle": "Pruebas de la API restaurantes \"after all\" hook in \"Pruebas de la API restaurantes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "c9f4bb89-2f58-4632-8f51-92d689e642cd",
              "parentUUID": "f11daf50-56b0-4000-a878-61087cf47af0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "470538ef-67a7-4073-9ccd-fc1055c1085c",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\restaurantes.test.js",
              "file": "\\test\\restaurantes.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "51cc54d6-db4a-42ff-9894-0cc690d1e7e8",
                  "parentUUID": "470538ef-67a7-4073-9ccd-fc1055c1085c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "85a02ec0-0ecb-49f2-be6f-13c6aa222cfe",
                  "parentUUID": "470538ef-67a7-4073-9ccd-fc1055c1085c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /restaurantes",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Devuelve el código de estado 200 para GET /restaurantes",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/restaurantes');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "aed20ccd-0214-425b-859c-4e7745167669",
                  "parentUUID": "470538ef-67a7-4073-9ccd-fc1055c1085c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran restaurantes",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran restaurantes",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/restaurantes/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "60321fa9-6578-4fee-9176-f221b0b69668",
                  "parentUUID": "470538ef-67a7-4073-9ccd-fc1055c1085c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada restaurante devuelto tiene los campos correctos",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET Cada restaurante devuelto tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('name');\nexpect( getAll[0]).to.have.property('location');\nexpect( getAll[0]).to.have.property('opening_hours');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "93160dfb-2bf9-4d5d-b350-6886be072c16",
                  "parentUUID": "470538ef-67a7-4073-9ccd-fc1055c1085c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51cc54d6-db4a-42ff-9894-0cc690d1e7e8",
                "85a02ec0-0ecb-49f2-be6f-13c6aa222cfe",
                "aed20ccd-0214-425b-859c-4e7745167669",
                "60321fa9-6578-4fee-9176-f221b0b69668",
                "93160dfb-2bf9-4d5d-b350-6886be072c16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2ed79b7-9182-4682-a85f-6b61b1242590",
              "title": "Pruebas del metodo GET restaurante por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\restaurantes.test.js",
              "file": "\\test\\restaurantes.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET restaurante por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "75710a18-a3c5-4eef-b945-55cf0135c5b9",
                  "parentUUID": "b2ed79b7-9182-4682-a85f-6b61b1242590",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API restaurantes Pruebas del metodo GET restaurante por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "7fa0ac0a-bcec-45ae-be5b-1022da31ff15",
                  "parentUUID": "b2ed79b7-9182-4682-a85f-6b61b1242590",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75710a18-a3c5-4eef-b945-55cf0135c5b9",
                "7fa0ac0a-bcec-45ae-be5b-1022da31ff15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f48b7e1-307a-4b14-b9fe-09209d228e9d",
          "title": "Pruebas de la API usuarios",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\usuarios.test.js",
          "file": "\\test\\usuarios.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API usuarios\"",
              "fullTitle": "Pruebas de la API usuarios \"before all\" hook in \"Pruebas de la API usuarios\"",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "getAll = await usuariosModel.obtenerTodo();\n        getId = await usuariosModel.findById(1);",
              "err": {
                "message": "TypeError: usuariosModel.obtenerTodo is not a function",
                "estack": "TypeError: usuariosModel.obtenerTodo is not a function\n    at Context.<anonymous> (file:///C:/Users/river/OneDrive/Documentos/GitHub/ElFortin_APIs/test/usuarios.test.js:11:39)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "5dd4dd69-5763-4d6b-a872-7dd9657aeca8",
              "parentUUID": "9f48b7e1-307a-4b14-b9fe-09209d228e9d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API usuarios\"",
              "fullTitle": "Pruebas de la API usuarios \"after all\" hook in \"Pruebas de la API usuarios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "9a9dae84-8cbc-40d4-8930-5ddbc5aa8e6d",
              "parentUUID": "9f48b7e1-307a-4b14-b9fe-09209d228e9d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9eca3c64-bb83-446b-afc1-b7bb82e6514e",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\usuarios.test.js",
              "file": "\\test\\usuarios.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "844c3953-0ab7-449f-9f7a-4c644309f96a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {},
                  "uuid": "06580b05-b608-414b-aac1-3ae3fa91c093",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /ventas",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Devuelve el código de estado 200 para GET /ventas",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "491d9938-059b-4cab-b6c5-4e110c3b1d21",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran ventas",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran ventas",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "faaecf6d-5a7e-4e36-9255-f9777a44e47e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "Cada venta devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET Cada venta devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('report_date');\nexpect( getAll[0]).to.have.property('total_sales');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {},
                  "uuid": "30863bb0-535a-41e1-a54b-52f2c8a5adb6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "844c3953-0ab7-449f-9f7a-4c644309f96a",
                "06580b05-b608-414b-aac1-3ae3fa91c093",
                "491d9938-059b-4cab-b6c5-4e110c3b1d21",
                "faaecf6d-5a7e-4e36-9255-f9777a44e47e",
                "30863bb0-535a-41e1-a54b-52f2c8a5adb6"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "add777ee-c6a6-40bc-a59a-637039aee57d",
              "title": "Pruebas del metodo GET venta por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\usuarios.test.js",
              "file": "\\test\\usuarios.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET venta por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {},
                  "uuid": "9a3effbe-75a9-486b-8aa8-c23854c9ef34",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API usuarios Pruebas del metodo GET venta por id No devuelve un array",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "ecab89b2-8276-4812-b661-14d04608c785",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "9a3effbe-75a9-486b-8aa8-c23854c9ef34",
                "ecab89b2-8276-4812-b661-14d04608c785"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "667238be-b724-41db-ad1f-26d6f6b3879a",
          "title": "Validation Functions",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
          "file": "\\test\\validations.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ea1479ca-a018-4127-a068-ac232d8810d1",
              "title": "SQL Injection Prevention (hasUnsafeCharacters)",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if input contains single quotes",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains single quotes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters(\"O'Reilly\")).to.be.true;",
                  "err": {},
                  "uuid": "14071a33-2ff0-4a98-8a4d-cfe585ff25c4",
                  "parentUUID": "ea1479ca-a018-4127-a068-ac232d8810d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains double quotes",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains double quotes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('He said \"Hello\"')).to.be.true;",
                  "err": {},
                  "uuid": "76890741-b464-4ef8-8761-3411516859d3",
                  "parentUUID": "ea1479ca-a018-4127-a068-ac232d8810d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains backslash",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains backslash",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('C:\\\\Windows')).to.be.true;",
                  "err": {},
                  "uuid": "4b7aada4-1f2b-4446-9fb2-cd5a0ed87fe0",
                  "parentUUID": "ea1479ca-a018-4127-a068-ac232d8810d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains semicolon",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains semicolon",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('DROP TABLE users;')).to.be.true;",
                  "err": {},
                  "uuid": "3f0dbdc6-84cb-4d07-b0ed-807b88df499b",
                  "parentUUID": "ea1479ca-a018-4127-a068-ac232d8810d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if input contains double dash",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return true if input contains double dash",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('SELECT * FROM users --')).to.be.true;",
                  "err": {},
                  "uuid": "24e20561-f6c6-4cbf-9f65-71f9dc388d85",
                  "parentUUID": "ea1479ca-a018-4127-a068-ac232d8810d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for safe input",
                  "fullTitle": "Validation Functions SQL Injection Prevention (hasUnsafeCharacters) should return false for safe input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.hasUnsafeCharacters('SafeInput123')).to.be.false;",
                  "err": {},
                  "uuid": "24febbb5-9618-4375-8846-f315648c5394",
                  "parentUUID": "ea1479ca-a018-4127-a068-ac232d8810d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14071a33-2ff0-4a98-8a4d-cfe585ff25c4",
                "76890741-b464-4ef8-8761-3411516859d3",
                "4b7aada4-1f2b-4446-9fb2-cd5a0ed87fe0",
                "3f0dbdc6-84cb-4d07-b0ed-807b88df499b",
                "24e20561-f6c6-4cbf-9f65-71f9dc388d85",
                "24febbb5-9618-4375-8846-f315648c5394"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4794a7c-8c79-4f72-94fe-477b0da29199",
              "title": "Category Name Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid category name",
                  "fullTitle": "Validation Functions Category Name Validation should return true for a valid category name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('Desserts')).to.be.true;",
                  "err": {},
                  "uuid": "55aeb32e-7686-4aa3-a3cb-51f4f9db97fd",
                  "parentUUID": "b4794a7c-8c79-4f72-94fe-477b0da29199",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a name with special characters",
                  "fullTitle": "Validation Functions Category Name Validation should return false for a name with special characters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName(\"Cakes@2024\")).to.be.false;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (file:///C:/Users/river/OneDrive/Documentos/GitHub/ElFortin_APIs/test/validations.test.js:32:71)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "c56a19a0-b89d-4ebd-84c8-d33855c4af49",
                  "parentUUID": "b4794a7c-8c79-4f72-94fe-477b0da29199",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an empty string",
                  "fullTitle": "Validation Functions Category Name Validation should return false for an empty string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('')).to.be.false;",
                  "err": {},
                  "uuid": "4ee78a6b-c27e-4741-8505-ca7ada7578a9",
                  "parentUUID": "b4794a7c-8c79-4f72-94fe-477b0da29199",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a name exceeding 50 characters",
                  "fullTitle": "Validation Functions Category Name Validation should return false for a name exceeding 50 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('a'.repeat(51))).to.be.false;",
                  "err": {},
                  "uuid": "caefd0ba-cf83-4ea1-87a6-05114aecfb96",
                  "parentUUID": "b4794a7c-8c79-4f72-94fe-477b0da29199",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a name with exactly 50 characters",
                  "fullTitle": "Validation Functions Category Name Validation should return true for a name with exactly 50 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateCategoryName('a'.repeat(50))).to.be.true;",
                  "err": {},
                  "uuid": "07e556f1-b40e-4f01-9bb6-e31d69636511",
                  "parentUUID": "b4794a7c-8c79-4f72-94fe-477b0da29199",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55aeb32e-7686-4aa3-a3cb-51f4f9db97fd",
                "4ee78a6b-c27e-4741-8505-ca7ada7578a9",
                "caefd0ba-cf83-4ea1-87a6-05114aecfb96",
                "07e556f1-b40e-4f01-9bb6-e31d69636511"
              ],
              "failures": [
                "c56a19a0-b89d-4ebd-84c8-d33855c4af49"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18f73db6-0f21-405d-8b6f-a65332475bee",
              "title": "Email Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid email address",
                  "fullTitle": "Validation Functions Email Validation should return true for a valid email address",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test@example.com')).to.be.true;",
                  "err": {},
                  "uuid": "07685c9c-62aa-4087-9d8b-e2f8f07a583b",
                  "parentUUID": "18f73db6-0f21-405d-8b6f-a65332475bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email without \"@\"",
                  "fullTitle": "Validation Functions Email Validation should return false for an email without \"@\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('testexample.com')).to.be.false;",
                  "err": {},
                  "uuid": "be8705a5-05cf-4005-975f-fe7c02244990",
                  "parentUUID": "18f73db6-0f21-405d-8b6f-a65332475bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email without domain",
                  "fullTitle": "Validation Functions Email Validation should return false for an email without domain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test@.com')).to.be.false;",
                  "err": {},
                  "uuid": "c01dcb4e-b39a-4236-92d8-b9c057c8364c",
                  "parentUUID": "18f73db6-0f21-405d-8b6f-a65332475bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email with spaces",
                  "fullTitle": "Validation Functions Email Validation should return false for an email with spaces",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test @example.com')).to.be.false;",
                  "err": {},
                  "uuid": "6e91f0b6-c94d-4bf4-b0f6-1631af9cd8dc",
                  "parentUUID": "18f73db6-0f21-405d-8b6f-a65332475bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an email with SQL injection characters",
                  "fullTitle": "Validation Functions Email Validation should return false for an email with SQL injection characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateEmail('test@example.com; DROP TABLE users;')).to.be.false;",
                  "err": {},
                  "uuid": "270ecbc6-edcd-4a9d-b777-8ca135435314",
                  "parentUUID": "18f73db6-0f21-405d-8b6f-a65332475bee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07685c9c-62aa-4087-9d8b-e2f8f07a583b",
                "be8705a5-05cf-4005-975f-fe7c02244990",
                "c01dcb4e-b39a-4236-92d8-b9c057c8364c",
                "6e91f0b6-c94d-4bf4-b0f6-1631af9cd8dc",
                "270ecbc6-edcd-4a9d-b777-8ca135435314"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0772fcc3-a6e8-4a32-88f0-482b80c80edf",
              "title": "Password Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid password",
                  "fullTitle": "Validation Functions Password Validation should return true for a valid password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('SecurePass123!')).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/Users/river/OneDrive/Documentos/GitHub/ElFortin_APIs/test/validations.test.js:67:71)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "5d3c776a-34a8-4b99-b714-9d15afe859ea",
                  "parentUUID": "0772fcc3-a6e8-4a32-88f0-482b80c80edf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password shorter than 8 characters",
                  "fullTitle": "Validation Functions Password Validation should return false for a password shorter than 8 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('Short1')).to.be.false;",
                  "err": {},
                  "uuid": "a3d626ca-8293-42a6-a7c0-850cc6884b44",
                  "parentUUID": "0772fcc3-a6e8-4a32-88f0-482b80c80edf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password longer than 20 characters",
                  "fullTitle": "Validation Functions Password Validation should return false for a password longer than 20 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('a'.repeat(21))).to.be.false;",
                  "err": {},
                  "uuid": "e0ce4360-ffe7-4826-84e2-dfa72597f488",
                  "parentUUID": "0772fcc3-a6e8-4a32-88f0-482b80c80edf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password without numbers",
                  "fullTitle": "Validation Functions Password Validation should return false for a password without numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('PasswordOnly')).to.be.false;",
                  "err": {},
                  "uuid": "a60de914-8050-48b0-8e97-6b8a33abbb9a",
                  "parentUUID": "0772fcc3-a6e8-4a32-88f0-482b80c80edf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password with spaces",
                  "fullTitle": "Validation Functions Password Validation should return false for a password with spaces",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('Pass word123')).to.be.false;",
                  "err": {},
                  "uuid": "d3cd4c23-62e1-43e8-bb37-af9b4f0e6383",
                  "parentUUID": "0772fcc3-a6e8-4a32-88f0-482b80c80edf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a password with SQL injection patterns",
                  "fullTitle": "Validation Functions Password Validation should return false for a password with SQL injection patterns",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePassword('Passw0rd;--')).to.be.false;",
                  "err": {},
                  "uuid": "728178d5-f1f4-4d42-8b48-95867818afef",
                  "parentUUID": "0772fcc3-a6e8-4a32-88f0-482b80c80edf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3d626ca-8293-42a6-a7c0-850cc6884b44",
                "e0ce4360-ffe7-4826-84e2-dfa72597f488",
                "a60de914-8050-48b0-8e97-6b8a33abbb9a",
                "d3cd4c23-62e1-43e8-bb37-af9b4f0e6383",
                "728178d5-f1f4-4d42-8b48-95867818afef"
              ],
              "failures": [
                "5d3c776a-34a8-4b99-b714-9d15afe859ea"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0460bc80-1b19-40d9-82e9-f80b2f719bad",
              "title": "Phone Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid 10-digit phone number",
                  "fullTitle": "Validation Functions Phone Validation should return true for a valid 10-digit phone number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('1234567890')).to.be.true;",
                  "err": {},
                  "uuid": "466bb246-6ca7-44d5-9b92-e6f7393495fb",
                  "parentUUID": "0460bc80-1b19-40d9-82e9-f80b2f719bad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number with letters",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number with letters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('123ABC7890')).to.be.false;",
                  "err": {},
                  "uuid": "c738769d-0ebd-4c5b-842e-040e72422f2e",
                  "parentUUID": "0460bc80-1b19-40d9-82e9-f80b2f719bad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number with special characters",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number with special characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('123-456-7890')).to.be.false;",
                  "err": {},
                  "uuid": "92eb3fc0-c90d-4feb-80e7-b6a57643e151",
                  "parentUUID": "0460bc80-1b19-40d9-82e9-f80b2f719bad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number shorter than 10 digits",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number shorter than 10 digits",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('12345')).to.be.false;",
                  "err": {},
                  "uuid": "49ba1b96-601d-4eef-87c7-372f16cbe3fb",
                  "parentUUID": "0460bc80-1b19-40d9-82e9-f80b2f719bad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a phone number longer than 10 digits",
                  "fullTitle": "Validation Functions Phone Validation should return false for a phone number longer than 10 digits",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePhone('123456789012')).to.be.false;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (file:///C:/Users/river/OneDrive/Documentos/GitHub/ElFortin_APIs/test/validations.test.js:101:66)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "e55c956d-37ab-4262-8e75-2afae510b480",
                  "parentUUID": "0460bc80-1b19-40d9-82e9-f80b2f719bad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "466bb246-6ca7-44d5-9b92-e6f7393495fb",
                "c738769d-0ebd-4c5b-842e-040e72422f2e",
                "92eb3fc0-c90d-4feb-80e7-b6a57643e151",
                "49ba1b96-601d-4eef-87c7-372f16cbe3fb"
              ],
              "failures": [
                "e55c956d-37ab-4262-8e75-2afae510b480"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2391bade-4b38-4122-94d7-8af29f7888ee",
              "title": "Price Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid price",
                  "fullTitle": "Validation Functions Price Validation should return true for a valid price",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice(99.99)).to.be.true;",
                  "err": {},
                  "uuid": "5909ba2d-ff87-4291-99aa-af16d00d8857",
                  "parentUUID": "2391bade-4b38-4122-94d7-8af29f7888ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a negative price",
                  "fullTitle": "Validation Functions Price Validation should return false for a negative price",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice(-9.99)).to.be.false;",
                  "err": {},
                  "uuid": "4adb81b3-6da2-44be-aba2-0b2d73e3201f",
                  "parentUUID": "2391bade-4b38-4122-94d7-8af29f7888ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a price of 0",
                  "fullTitle": "Validation Functions Price Validation should return true for a price of 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice(0)).to.be.true;",
                  "err": {},
                  "uuid": "87e6b7f7-171e-4ff8-81ba-5fe78ad0e7e2",
                  "parentUUID": "2391bade-4b38-4122-94d7-8af29f7888ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-numeric input",
                  "fullTitle": "Validation Functions Price Validation should return false for non-numeric input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validatePrice('fifty')).to.be.false;",
                  "err": {},
                  "uuid": "c836c5f2-7930-492e-ac32-c8f8636b3302",
                  "parentUUID": "2391bade-4b38-4122-94d7-8af29f7888ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5909ba2d-ff87-4291-99aa-af16d00d8857",
                "4adb81b3-6da2-44be-aba2-0b2d73e3201f",
                "87e6b7f7-171e-4ff8-81ba-5fe78ad0e7e2",
                "c836c5f2-7930-492e-ac32-c8f8636b3302"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc795032-8de9-49c4-879e-5f5aca97cf96",
              "title": "Rating Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid rating of 1",
                  "fullTitle": "Validation Functions Rating Validation should return true for a valid rating of 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(1)).to.be.true;",
                  "err": {},
                  "uuid": "f339f4b8-70a1-4b29-bbc8-759c64504082",
                  "parentUUID": "fc795032-8de9-49c4-879e-5f5aca97cf96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a valid rating of 5",
                  "fullTitle": "Validation Functions Rating Validation should return true for a valid rating of 5",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(5)).to.be.true;",
                  "err": {},
                  "uuid": "3c35699b-be83-42c6-8c57-12e59efc326e",
                  "parentUUID": "fc795032-8de9-49c4-879e-5f5aca97cf96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a rating less than 1",
                  "fullTitle": "Validation Functions Rating Validation should return false for a rating less than 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(0)).to.be.false;",
                  "err": {},
                  "uuid": "fcae9af8-0cdb-4653-b628-4a4752d04306",
                  "parentUUID": "fc795032-8de9-49c4-879e-5f5aca97cf96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a rating greater than 5",
                  "fullTitle": "Validation Functions Rating Validation should return false for a rating greater than 5",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(6)).to.be.false;",
                  "err": {},
                  "uuid": "5d08628e-7753-477c-9fea-0328e3af0f8c",
                  "parentUUID": "fc795032-8de9-49c4-879e-5f5aca97cf96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a decimal rating",
                  "fullTitle": "Validation Functions Rating Validation should return false for a decimal rating",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating(4.5)).to.be.false;",
                  "err": {},
                  "uuid": "7d25af1f-2a49-486b-90bb-628cc35ff04e",
                  "parentUUID": "fc795032-8de9-49c4-879e-5f5aca97cf96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-numeric rating",
                  "fullTitle": "Validation Functions Rating Validation should return false for non-numeric rating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateRating('excellent')).to.be.false;",
                  "err": {},
                  "uuid": "ee6e5f43-2f3f-4ff9-819e-e1d457a8362f",
                  "parentUUID": "fc795032-8de9-49c4-879e-5f5aca97cf96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f339f4b8-70a1-4b29-bbc8-759c64504082",
                "3c35699b-be83-42c6-8c57-12e59efc326e",
                "fcae9af8-0cdb-4653-b628-4a4752d04306",
                "5d08628e-7753-477c-9fea-0328e3af0f8c",
                "7d25af1f-2a49-486b-90bb-628cc35ff04e",
                "ee6e5f43-2f3f-4ff9-819e-e1d457a8362f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70370d3d-04be-4e88-bed8-1f71b4f8976b",
              "title": "Date Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid date",
                  "fullTitle": "Validation Functions Date Validation should return true for a valid date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('2024-12-31')).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/Users/river/OneDrive/Documentos/GitHub/ElFortin_APIs/test/validations.test.js:146:63)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "6033b223-d521-46a7-8e2e-5c1ae458e3e9",
                  "parentUUID": "70370d3d-04be-4e88-bed8-1f71b4f8976b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for an invalid date format",
                  "fullTitle": "Validation Functions Date Validation should return false for an invalid date format",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('31/12/2024')).to.be.false;",
                  "err": {},
                  "uuid": "1bdf2be6-6b65-483b-b57d-9304a2ab8400",
                  "parentUUID": "70370d3d-04be-4e88-bed8-1f71b4f8976b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a non-existent date",
                  "fullTitle": "Validation Functions Date Validation should return false for a non-existent date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('2024-02-30')).to.be.false;",
                  "err": {},
                  "uuid": "d41edf7b-9a0c-493d-9ca1-36ad547f3265",
                  "parentUUID": "70370d3d-04be-4e88-bed8-1f71b4f8976b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-date strings",
                  "fullTitle": "Validation Functions Date Validation should return false for non-date strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateDate('not-a-date')).to.be.false;",
                  "err": {},
                  "uuid": "8397ec2b-5596-4fda-81bb-3f8da3369f3d",
                  "parentUUID": "70370d3d-04be-4e88-bed8-1f71b4f8976b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1bdf2be6-6b65-483b-b57d-9304a2ab8400",
                "d41edf7b-9a0c-493d-9ca1-36ad547f3265",
                "8397ec2b-5596-4fda-81bb-3f8da3369f3d"
              ],
              "failures": [
                "6033b223-d521-46a7-8e2e-5c1ae458e3e9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d708069c-8e08-4edc-bd06-c7f8262d675d",
              "title": "Integer Validation",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\validations.test.js",
              "file": "\\test\\validations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid positive integer",
                  "fullTitle": "Validation Functions Integer Validation should return true for a valid positive integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(42)).to.be.true;",
                  "err": {},
                  "uuid": "b1d2928d-a15a-420e-aaf9-90b068769568",
                  "parentUUID": "d708069c-8e08-4edc-bd06-c7f8262d675d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for zero",
                  "fullTitle": "Validation Functions Integer Validation should return true for zero",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(0)).to.be.true;",
                  "err": {},
                  "uuid": "c0e4e237-9ac2-43e9-9940-dfb36fe8b073",
                  "parentUUID": "d708069c-8e08-4edc-bd06-c7f8262d675d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a negative integer",
                  "fullTitle": "Validation Functions Integer Validation should return false for a negative integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(-5)).to.be.false;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (file:///C:/Users/river/OneDrive/Documentos/GitHub/ElFortin_APIs/test/validations.test.js:168:56)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "982e3089-fd8e-4f7d-8b5a-8aef33006124",
                  "parentUUID": "d708069c-8e08-4edc-bd06-c7f8262d675d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a decimal number",
                  "fullTitle": "Validation Functions Integer Validation should return false for a decimal number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger(42.5)).to.be.false;",
                  "err": {},
                  "uuid": "0bceca7f-2612-4e7e-94f2-ae963afc4438",
                  "parentUUID": "d708069c-8e08-4edc-bd06-c7f8262d675d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for non-numeric input",
                  "fullTitle": "Validation Functions Integer Validation should return false for non-numeric input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(Validator.validateInteger('forty-two')).to.be.false;",
                  "err": {},
                  "uuid": "84680962-4b8b-4477-a49f-084f1963730e",
                  "parentUUID": "d708069c-8e08-4edc-bd06-c7f8262d675d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1d2928d-a15a-420e-aaf9-90b068769568",
                "c0e4e237-9ac2-43e9-9940-dfb36fe8b073",
                "0bceca7f-2612-4e7e-94f2-ae963afc4438",
                "84680962-4b8b-4477-a49f-084f1963730e"
              ],
              "failures": [
                "982e3089-fd8e-4f7d-8b5a-8aef33006124"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f9e4520b-e779-4868-8a55-87a0c51e9f36",
          "title": "Pruebas de la API ventas",
          "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\ventas.test.js",
          "file": "\\test\\ventas.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de la API ventas\"",
              "fullTitle": "Pruebas de la API ventas \"before all\" hook in \"Pruebas de la API ventas\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getAll = await ventasModel.obtenerTodo();\n        getId = await ventasModel.obtenerVentaId(1);",
              "err": {},
              "uuid": "a53972b0-8de2-4019-9474-6fbefe573531",
              "parentUUID": "f9e4520b-e779-4868-8a55-87a0c51e9f36",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de la API ventas\"",
              "fullTitle": "Pruebas de la API ventas \"after all\" hook in \"Pruebas de la API ventas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cerrar el servidor de Express\nserver.close();",
              "err": {},
              "uuid": "ff3093ce-b446-431d-a114-eec207b32a6c",
              "parentUUID": "f9e4520b-e779-4868-8a55-87a0c51e9f36",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "cc510e0e-6580-49f2-841b-91225e00b273",
              "title": "Pruebas del metodo GET",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\ventas.test.js",
              "file": "\\test\\ventas.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un array",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Devuelve un array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll).to.be.an('array');",
                  "err": {},
                  "uuid": "5eb0be4f-16eb-4a94-b7f1-c44e46b1e68e",
                  "parentUUID": "cc510e0e-6580-49f2-841b-91225e00b273",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hay objetos dentro del array",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Hay objetos dentro del array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.be.an('object');",
                  "err": {
                    "message": "AssertionError: expected undefined to be an object",
                    "estack": "AssertionError: expected undefined to be an object\n    at Context.<anonymous> (file:///C:/Users/river/OneDrive/Documentos/GitHub/ElFortin_APIs/test/ventas.test.js:27:38)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "e75d0294-bcb2-48dd-b15b-1cebb3aab17e",
                  "parentUUID": "cc510e0e-6580-49f2-841b-91225e00b273",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 200 para GET /ventas",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Devuelve el código de estado 200 para GET /ventas",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas');\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "5a6108ea-1656-4d59-8a5c-3b1871c8200d",
                  "parentUUID": "cc510e0e-6580-49f2-841b-91225e00b273",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devuelve el código de estado 404 si no se encuentran ventas",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Devuelve el código de estado 404 si no se encuentran ventas",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/api/ventas/9999'); // ID que no existe\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "858b8a42-6969-4164-b6fd-cc6deb09cad8",
                  "parentUUID": "cc510e0e-6580-49f2-841b-91225e00b273",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cada venta devuelta tiene los campos correctos",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET Cada venta devuelta tiene los campos correctos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect( getAll[0]).to.have.property('id');\nexpect( getAll[0]).to.have.property('restaurant_id');\nexpect( getAll[0]).to.have.property('report_date');\nexpect( getAll[0]).to.have.property('total_sales');\nexpect( getAll[0]).to.have.property('created_at');\nexpect( getAll[0]).to.have.property('updated_at');\nexpect( getAll[0]).to.have.property('deleted_at');",
                  "err": {
                    "message": "AssertionError: Target cannot be null or undefined.",
                    "estack": "AssertionError: Target cannot be null or undefined.\n    at Context.<anonymous> (file:///C:/Users/river/OneDrive/Documentos/GitHub/ElFortin_APIs/test/ventas.test.js:39:40)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "a09e0fe5-9649-4336-be78-5bf3206f1492",
                  "parentUUID": "cc510e0e-6580-49f2-841b-91225e00b273",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5eb0be4f-16eb-4a94-b7f1-c44e46b1e68e",
                "5a6108ea-1656-4d59-8a5c-3b1871c8200d",
                "858b8a42-6969-4164-b6fd-cc6deb09cad8"
              ],
              "failures": [
                "e75d0294-bcb2-48dd-b15b-1cebb3aab17e",
                "a09e0fe5-9649-4336-be78-5bf3206f1492"
              ],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e91fb218-59b5-4efb-aaec-4e3283af53fd",
              "title": "Pruebas del metodo GET venta por id",
              "fullFile": "C:\\Users\\river\\OneDrive\\Documentos\\GitHub\\ElFortin_APIs\\test\\ventas.test.js",
              "file": "\\test\\ventas.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devuelve un objeto",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET venta por id Devuelve un objeto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.an('object');",
                  "err": {
                    "message": "AssertionError: expected undefined to be an object",
                    "estack": "AssertionError: expected undefined to be an object\n    at Context.<anonymous> (file:///C:/Users/river/OneDrive/Documentos/GitHub/ElFortin_APIs/test/ventas.test.js:53:33)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "e8538146-3140-45cb-a8d4-ec7e07dcc288",
                  "parentUUID": "e91fb218-59b5-4efb-aaec-4e3283af53fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No devuelve un array",
                  "fullTitle": "Pruebas de la API ventas Pruebas del metodo GET venta por id No devuelve un array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(getId).to.be.not.an('array');",
                  "err": {},
                  "uuid": "b0267f4d-a016-489c-9f85-ea18a9f4b118",
                  "parentUUID": "e91fb218-59b5-4efb-aaec-4e3283af53fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0267f4d-a016-489c-9f85-ea18a9f4b118"
              ],
              "failures": [
                "e8538146-3140-45cb-a8d4-ec7e07dcc288"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}